// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: article/article.proto

package grpcconnect

import (
	grpc "blogapi.miyamo.today/article-service/internal/infra/grpc"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArticleServiceName is the fully-qualified name of the ArticleService service.
	ArticleServiceName = "article.ArticleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArticleServiceGetArticleByIdProcedure is the fully-qualified name of the ArticleService's
	// GetArticleById RPC.
	ArticleServiceGetArticleByIdProcedure = "/article.ArticleService/GetArticleById"
	// ArticleServiceGetAllArticlesProcedure is the fully-qualified name of the ArticleService's
	// GetAllArticles RPC.
	ArticleServiceGetAllArticlesProcedure = "/article.ArticleService/GetAllArticles"
	// ArticleServiceGetNextArticlesProcedure is the fully-qualified name of the ArticleService's
	// GetNextArticles RPC.
	ArticleServiceGetNextArticlesProcedure = "/article.ArticleService/GetNextArticles"
	// ArticleServiceGetPrevArticlesProcedure is the fully-qualified name of the ArticleService's
	// GetPrevArticles RPC.
	ArticleServiceGetPrevArticlesProcedure = "/article.ArticleService/GetPrevArticles"
)

// ArticleServiceClient is a client for the article.ArticleService service.
type ArticleServiceClient interface {
	GetArticleById(context.Context, *connect.Request[grpc.GetArticleByIdRequest]) (*connect.Response[grpc.GetArticleByIdResponse], error)
	GetAllArticles(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllArticlesResponse], error)
	GetNextArticles(context.Context, *connect.Request[grpc.GetNextArticlesRequest]) (*connect.Response[grpc.GetNextArticlesResponse], error)
	GetPrevArticles(context.Context, *connect.Request[grpc.GetPrevArticlesRequest]) (*connect.Response[grpc.GetPrevArticlesResponse], error)
}

// NewArticleServiceClient constructs a client for the article.ArticleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArticleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	articleServiceMethods := grpc.File_article_article_proto.Services().ByName("ArticleService").Methods()
	return &articleServiceClient{
		getArticleById: connect.NewClient[grpc.GetArticleByIdRequest, grpc.GetArticleByIdResponse](
			httpClient,
			baseURL+ArticleServiceGetArticleByIdProcedure,
			connect.WithSchema(articleServiceMethods.ByName("GetArticleById")),
			connect.WithClientOptions(opts...),
		),
		getAllArticles: connect.NewClient[emptypb.Empty, grpc.GetAllArticlesResponse](
			httpClient,
			baseURL+ArticleServiceGetAllArticlesProcedure,
			connect.WithSchema(articleServiceMethods.ByName("GetAllArticles")),
			connect.WithClientOptions(opts...),
		),
		getNextArticles: connect.NewClient[grpc.GetNextArticlesRequest, grpc.GetNextArticlesResponse](
			httpClient,
			baseURL+ArticleServiceGetNextArticlesProcedure,
			connect.WithSchema(articleServiceMethods.ByName("GetNextArticles")),
			connect.WithClientOptions(opts...),
		),
		getPrevArticles: connect.NewClient[grpc.GetPrevArticlesRequest, grpc.GetPrevArticlesResponse](
			httpClient,
			baseURL+ArticleServiceGetPrevArticlesProcedure,
			connect.WithSchema(articleServiceMethods.ByName("GetPrevArticles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// articleServiceClient implements ArticleServiceClient.
type articleServiceClient struct {
	getArticleById  *connect.Client[grpc.GetArticleByIdRequest, grpc.GetArticleByIdResponse]
	getAllArticles  *connect.Client[emptypb.Empty, grpc.GetAllArticlesResponse]
	getNextArticles *connect.Client[grpc.GetNextArticlesRequest, grpc.GetNextArticlesResponse]
	getPrevArticles *connect.Client[grpc.GetPrevArticlesRequest, grpc.GetPrevArticlesResponse]
}

// GetArticleById calls article.ArticleService.GetArticleById.
func (c *articleServiceClient) GetArticleById(ctx context.Context, req *connect.Request[grpc.GetArticleByIdRequest]) (*connect.Response[grpc.GetArticleByIdResponse], error) {
	return c.getArticleById.CallUnary(ctx, req)
}

// GetAllArticles calls article.ArticleService.GetAllArticles.
func (c *articleServiceClient) GetAllArticles(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllArticlesResponse], error) {
	return c.getAllArticles.CallUnary(ctx, req)
}

// GetNextArticles calls article.ArticleService.GetNextArticles.
func (c *articleServiceClient) GetNextArticles(ctx context.Context, req *connect.Request[grpc.GetNextArticlesRequest]) (*connect.Response[grpc.GetNextArticlesResponse], error) {
	return c.getNextArticles.CallUnary(ctx, req)
}

// GetPrevArticles calls article.ArticleService.GetPrevArticles.
func (c *articleServiceClient) GetPrevArticles(ctx context.Context, req *connect.Request[grpc.GetPrevArticlesRequest]) (*connect.Response[grpc.GetPrevArticlesResponse], error) {
	return c.getPrevArticles.CallUnary(ctx, req)
}

// ArticleServiceHandler is an implementation of the article.ArticleService service.
type ArticleServiceHandler interface {
	GetArticleById(context.Context, *connect.Request[grpc.GetArticleByIdRequest]) (*connect.Response[grpc.GetArticleByIdResponse], error)
	GetAllArticles(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllArticlesResponse], error)
	GetNextArticles(context.Context, *connect.Request[grpc.GetNextArticlesRequest]) (*connect.Response[grpc.GetNextArticlesResponse], error)
	GetPrevArticles(context.Context, *connect.Request[grpc.GetPrevArticlesRequest]) (*connect.Response[grpc.GetPrevArticlesResponse], error)
}

// NewArticleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticleServiceHandler(svc ArticleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	articleServiceMethods := grpc.File_article_article_proto.Services().ByName("ArticleService").Methods()
	articleServiceGetArticleByIdHandler := connect.NewUnaryHandler(
		ArticleServiceGetArticleByIdProcedure,
		svc.GetArticleById,
		connect.WithSchema(articleServiceMethods.ByName("GetArticleById")),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceGetAllArticlesHandler := connect.NewUnaryHandler(
		ArticleServiceGetAllArticlesProcedure,
		svc.GetAllArticles,
		connect.WithSchema(articleServiceMethods.ByName("GetAllArticles")),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceGetNextArticlesHandler := connect.NewUnaryHandler(
		ArticleServiceGetNextArticlesProcedure,
		svc.GetNextArticles,
		connect.WithSchema(articleServiceMethods.ByName("GetNextArticles")),
		connect.WithHandlerOptions(opts...),
	)
	articleServiceGetPrevArticlesHandler := connect.NewUnaryHandler(
		ArticleServiceGetPrevArticlesProcedure,
		svc.GetPrevArticles,
		connect.WithSchema(articleServiceMethods.ByName("GetPrevArticles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/article.ArticleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArticleServiceGetArticleByIdProcedure:
			articleServiceGetArticleByIdHandler.ServeHTTP(w, r)
		case ArticleServiceGetAllArticlesProcedure:
			articleServiceGetAllArticlesHandler.ServeHTTP(w, r)
		case ArticleServiceGetNextArticlesProcedure:
			articleServiceGetNextArticlesHandler.ServeHTTP(w, r)
		case ArticleServiceGetPrevArticlesProcedure:
			articleServiceGetPrevArticlesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArticleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticleServiceHandler struct{}

func (UnimplementedArticleServiceHandler) GetArticleById(context.Context, *connect.Request[grpc.GetArticleByIdRequest]) (*connect.Response[grpc.GetArticleByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("article.ArticleService.GetArticleById is not implemented"))
}

func (UnimplementedArticleServiceHandler) GetAllArticles(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllArticlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("article.ArticleService.GetAllArticles is not implemented"))
}

func (UnimplementedArticleServiceHandler) GetNextArticles(context.Context, *connect.Request[grpc.GetNextArticlesRequest]) (*connect.Response[grpc.GetNextArticlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("article.ArticleService.GetNextArticles is not implemented"))
}

func (UnimplementedArticleServiceHandler) GetPrevArticles(context.Context, *connect.Request[grpc.GetPrevArticlesRequest]) (*connect.Response[grpc.GetPrevArticlesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("article.ArticleService.GetPrevArticles is not implemented"))
}
