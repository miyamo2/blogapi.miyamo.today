// Code generated by MockGen. DO NOT EDIT.
// Source: get_prev.go
//
// Generated by this command:
//
//	mockgen -source=get_prev.go -destination=../../../../mock/if-adapter/controller/pb/usecase/mock_get_prev.go -package=mock_usecase
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/miyamo2/api.miyamo.today/article-service/internal/if-adapter/controller/pb/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockGetPrev is a mock of GetPrev interface.
type MockGetPrev[I usecase.GetPrevInDto, T usecase.Tag, A usecase.Article[T], O usecase.GetPrevOutDto[T, A]] struct {
	ctrl     *gomock.Controller
	recorder *MockGetPrevMockRecorder[I, T, A, O]
}

// MockGetPrevMockRecorder is the mock recorder for MockGetPrev.
type MockGetPrevMockRecorder[I usecase.GetPrevInDto, T usecase.Tag, A usecase.Article[T], O usecase.GetPrevOutDto[T, A]] struct {
	mock *MockGetPrev[I, T, A, O]
}

// NewMockGetPrev creates a new mock instance.
func NewMockGetPrev[I usecase.GetPrevInDto, T usecase.Tag, A usecase.Article[T], O usecase.GetPrevOutDto[T, A]](ctrl *gomock.Controller) *MockGetPrev[I, T, A, O] {
	mock := &MockGetPrev[I, T, A, O]{ctrl: ctrl}
	mock.recorder = &MockGetPrevMockRecorder[I, T, A, O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPrev[I, T, A, O]) EXPECT() *MockGetPrevMockRecorder[I, T, A, O] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetPrev[I, T, A, O]) Execute(ctx context.Context, in I) (O, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(O)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetPrevMockRecorder[I, T, A, O]) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetPrev[I, T, A, O])(nil).Execute), ctx, in)
}
