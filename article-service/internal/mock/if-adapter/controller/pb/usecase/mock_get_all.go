// Code generated by MockGen. DO NOT EDIT.
// Source: get_all.go
//
// Generated by this command:
//
//	mockgen -source=get_all.go -destination=../../../../mock/if-adapter/controller/pb/usecase/mock_get_all.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	dto "github.com/miyamo2/blogapi.miyamo.today/article-service/internal/app/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockGetAll is a mock of GetAll interface.
type MockGetAll struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllMockRecorder
	isgomock struct{}
}

// MockGetAllMockRecorder is the mock recorder for MockGetAll.
type MockGetAllMockRecorder struct {
	mock *MockGetAll
}

// NewMockGetAll creates a new mock instance.
func NewMockGetAll(ctrl *gomock.Controller) *MockGetAll {
	mock := &MockGetAll{ctrl: ctrl}
	mock.recorder = &MockGetAllMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAll) EXPECT() *MockGetAllMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAll) Execute(ctx context.Context) (*dto.GetAllOutDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(*dto.GetAllOutDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAllMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAll)(nil).Execute), ctx)
}
