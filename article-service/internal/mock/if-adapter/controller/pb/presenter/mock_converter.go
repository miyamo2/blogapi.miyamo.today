// Code generated by MockGen. DO NOT EDIT.
// Source: converter.go
//
// Generated by this command:
//
//	mockgen -source=converter.go -destination=../../../../mock/if-adapter/controller/pb/presenter/mock_converter.go -package=presenter
//

// Package presenter is a generated GoMock package.
package presenter

import (
	context "context"
	reflect "reflect"

	dto "github.com/miyamo2/blogapi.miyamo.today/article-service/internal/app/usecase/dto"
	pb "github.com/miyamo2/blogapi.miyamo.today/protogen/article/server/pb"
	gomock "go.uber.org/mock/gomock"
)

// MockToGetNextConverter is a mock of ToGetNextConverter interface.
type MockToGetNextConverter struct {
	ctrl     *gomock.Controller
	recorder *MockToGetNextConverterMockRecorder
	isgomock struct{}
}

// MockToGetNextConverterMockRecorder is the mock recorder for MockToGetNextConverter.
type MockToGetNextConverterMockRecorder struct {
	mock *MockToGetNextConverter
}

// NewMockToGetNextConverter creates a new mock instance.
func NewMockToGetNextConverter(ctrl *gomock.Controller) *MockToGetNextConverter {
	mock := &MockToGetNextConverter{ctrl: ctrl}
	mock.recorder = &MockToGetNextConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToGetNextConverter) EXPECT() *MockToGetNextConverterMockRecorder {
	return m.recorder
}

// ToGetNextArticlesResponse mocks base method.
func (m *MockToGetNextConverter) ToGetNextArticlesResponse(ctx context.Context, from *dto.GetNextOutDto) (*pb.GetNextArticlesResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetNextArticlesResponse", ctx, from)
	ret0, _ := ret[0].(*pb.GetNextArticlesResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ToGetNextArticlesResponse indicates an expected call of ToGetNextArticlesResponse.
func (mr *MockToGetNextConverterMockRecorder) ToGetNextArticlesResponse(ctx, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetNextArticlesResponse", reflect.TypeOf((*MockToGetNextConverter)(nil).ToGetNextArticlesResponse), ctx, from)
}

// MockToGetAllConverter is a mock of ToGetAllConverter interface.
type MockToGetAllConverter struct {
	ctrl     *gomock.Controller
	recorder *MockToGetAllConverterMockRecorder
	isgomock struct{}
}

// MockToGetAllConverterMockRecorder is the mock recorder for MockToGetAllConverter.
type MockToGetAllConverterMockRecorder struct {
	mock *MockToGetAllConverter
}

// NewMockToGetAllConverter creates a new mock instance.
func NewMockToGetAllConverter(ctrl *gomock.Controller) *MockToGetAllConverter {
	mock := &MockToGetAllConverter{ctrl: ctrl}
	mock.recorder = &MockToGetAllConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToGetAllConverter) EXPECT() *MockToGetAllConverterMockRecorder {
	return m.recorder
}

// ToGetAllArticlesResponse mocks base method.
func (m *MockToGetAllConverter) ToGetAllArticlesResponse(ctx context.Context, from *dto.GetAllOutDto) (*pb.GetAllArticlesResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetAllArticlesResponse", ctx, from)
	ret0, _ := ret[0].(*pb.GetAllArticlesResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ToGetAllArticlesResponse indicates an expected call of ToGetAllArticlesResponse.
func (mr *MockToGetAllConverterMockRecorder) ToGetAllArticlesResponse(ctx, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetAllArticlesResponse", reflect.TypeOf((*MockToGetAllConverter)(nil).ToGetAllArticlesResponse), ctx, from)
}

// MockToGetByIdConverter is a mock of ToGetByIdConverter interface.
type MockToGetByIdConverter struct {
	ctrl     *gomock.Controller
	recorder *MockToGetByIdConverterMockRecorder
	isgomock struct{}
}

// MockToGetByIdConverterMockRecorder is the mock recorder for MockToGetByIdConverter.
type MockToGetByIdConverterMockRecorder struct {
	mock *MockToGetByIdConverter
}

// NewMockToGetByIdConverter creates a new mock instance.
func NewMockToGetByIdConverter(ctrl *gomock.Controller) *MockToGetByIdConverter {
	mock := &MockToGetByIdConverter{ctrl: ctrl}
	mock.recorder = &MockToGetByIdConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToGetByIdConverter) EXPECT() *MockToGetByIdConverterMockRecorder {
	return m.recorder
}

// ToGetByIdArticlesResponse mocks base method.
func (m *MockToGetByIdConverter) ToGetByIdArticlesResponse(ctx context.Context, from *dto.GetByIdOutDto) (*pb.GetArticleByIdResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetByIdArticlesResponse", ctx, from)
	ret0, _ := ret[0].(*pb.GetArticleByIdResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ToGetByIdArticlesResponse indicates an expected call of ToGetByIdArticlesResponse.
func (mr *MockToGetByIdConverterMockRecorder) ToGetByIdArticlesResponse(ctx, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetByIdArticlesResponse", reflect.TypeOf((*MockToGetByIdConverter)(nil).ToGetByIdArticlesResponse), ctx, from)
}

// MockToGetPrevConverter is a mock of ToGetPrevConverter interface.
type MockToGetPrevConverter struct {
	ctrl     *gomock.Controller
	recorder *MockToGetPrevConverterMockRecorder
	isgomock struct{}
}

// MockToGetPrevConverterMockRecorder is the mock recorder for MockToGetPrevConverter.
type MockToGetPrevConverterMockRecorder struct {
	mock *MockToGetPrevConverter
}

// NewMockToGetPrevConverter creates a new mock instance.
func NewMockToGetPrevConverter(ctrl *gomock.Controller) *MockToGetPrevConverter {
	mock := &MockToGetPrevConverter{ctrl: ctrl}
	mock.recorder = &MockToGetPrevConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToGetPrevConverter) EXPECT() *MockToGetPrevConverterMockRecorder {
	return m.recorder
}

// ToGetPrevArticlesResponse mocks base method.
func (m *MockToGetPrevConverter) ToGetPrevArticlesResponse(ctx context.Context, from *dto.GetPrevOutDto) (*pb.GetPrevArticlesResponse, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToGetPrevArticlesResponse", ctx, from)
	ret0, _ := ret[0].(*pb.GetPrevArticlesResponse)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ToGetPrevArticlesResponse indicates an expected call of ToGetPrevArticlesResponse.
func (mr *MockToGetPrevConverterMockRecorder) ToGetPrevArticlesResponse(ctx, from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToGetPrevArticlesResponse", reflect.TypeOf((*MockToGetPrevConverter)(nil).ToGetPrevArticlesResponse), ctx, from)
}
