// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/miyamo2/blogapi.miyamo.today/protogen/article/client/pb (interfaces: ArticleServiceClient)
//
// Generated by this command:
//
//	mockgen.exe github.com/miyamo2/blogapi.miyamo.today/protogen/article/client/pb ArticleServiceClient
//
// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	internal "github.com/miyamo2/blogapi.miyamo.today/protogen/article/client/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockArticleServiceClient is a mock of ArticleServiceClient interface.
type MockArticleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceClientMockRecorder
}

// MockArticleServiceClientMockRecorder is the mock recorder for MockArticleServiceClient.
type MockArticleServiceClientMockRecorder struct {
	mock *MockArticleServiceClient
}

// NewMockArticleServiceClient creates a new mock instance.
func NewMockArticleServiceClient(ctrl *gomock.Controller) *MockArticleServiceClient {
	mock := &MockArticleServiceClient{ctrl: ctrl}
	mock.recorder = &MockArticleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleServiceClient) EXPECT() *MockArticleServiceClientMockRecorder {
	return m.recorder
}

// GetAllArticles mocks base method.
func (m *MockArticleServiceClient) GetAllArticles(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*internal.GetAllArticlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllArticles", varargs...)
	ret0, _ := ret[0].(*internal.GetAllArticlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArticles indicates an expected call of GetAllArticles.
func (mr *MockArticleServiceClientMockRecorder) GetAllArticles(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArticles", reflect.TypeOf((*MockArticleServiceClient)(nil).GetAllArticles), varargs...)
}

// GetArticleById mocks base method.
func (m *MockArticleServiceClient) GetArticleById(arg0 context.Context, arg1 *internal.GetArticleByIdRequest, arg2 ...grpc.CallOption) (*internal.GetArticleByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArticleById", varargs...)
	ret0, _ := ret[0].(*internal.GetArticleByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleById indicates an expected call of GetArticleById.
func (mr *MockArticleServiceClientMockRecorder) GetArticleById(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleById", reflect.TypeOf((*MockArticleServiceClient)(nil).GetArticleById), varargs...)
}

// GetNextArticles mocks base method.
func (m *MockArticleServiceClient) GetNextArticles(arg0 context.Context, arg1 *internal.GetNextArticlesRequest, arg2 ...grpc.CallOption) (*internal.GetNextArticlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNextArticles", varargs...)
	ret0, _ := ret[0].(*internal.GetNextArticlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextArticles indicates an expected call of GetNextArticles.
func (mr *MockArticleServiceClientMockRecorder) GetNextArticles(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextArticles", reflect.TypeOf((*MockArticleServiceClient)(nil).GetNextArticles), varargs...)
}

// GetPrevArticles mocks base method.
func (m *MockArticleServiceClient) GetPrevArticles(arg0 context.Context, arg1 *internal.GetPrevArticlesRequest, arg2 ...grpc.CallOption) (*internal.GetPrevArticlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrevArticles", varargs...)
	ret0, _ := ret[0].(*internal.GetPrevArticlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevArticles indicates an expected call of GetPrevArticles.
func (mr *MockArticleServiceClientMockRecorder) GetPrevArticles(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevArticles", reflect.TypeOf((*MockArticleServiceClient)(nil).GetPrevArticles), varargs...)
}
