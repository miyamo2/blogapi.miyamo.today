// Code generated by MockGen. DO NOT EDIT.
// Source: blogging_event_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=blogging_event_grpc.pb.go -destination=../../../mock/infra/grpc/bloggingevent/mock_blogging_event_grpc.pb.go -package=bloggingevent
//

// Package bloggingevent is a generated GoMock package.
package bloggingevent

import (
	context "context"
	reflect "reflect"

	bloggingevent "github.com/miyamo2/blogapi.miyamo.today/federator/internal/infra/grpc/bloggingevent"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBloggingEventServiceClient is a mock of BloggingEventServiceClient interface.
type MockBloggingEventServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBloggingEventServiceClientMockRecorder
	isgomock struct{}
}

// MockBloggingEventServiceClientMockRecorder is the mock recorder for MockBloggingEventServiceClient.
type MockBloggingEventServiceClientMockRecorder struct {
	mock *MockBloggingEventServiceClient
}

// NewMockBloggingEventServiceClient creates a new mock instance.
func NewMockBloggingEventServiceClient(ctrl *gomock.Controller) *MockBloggingEventServiceClient {
	mock := &MockBloggingEventServiceClient{ctrl: ctrl}
	mock.recorder = &MockBloggingEventServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloggingEventServiceClient) EXPECT() *MockBloggingEventServiceClientMockRecorder {
	return m.recorder
}

// AttachTag mocks base method.
func (m *MockBloggingEventServiceClient) AttachTag(ctx context.Context, in *bloggingevent.AttachTagRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachTag", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTag indicates an expected call of AttachTag.
func (mr *MockBloggingEventServiceClientMockRecorder) AttachTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTag", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).AttachTag), varargs...)
}

// CreateArticle mocks base method.
func (m *MockBloggingEventServiceClient) CreateArticle(ctx context.Context, in *bloggingevent.CreateArticleRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateArticle", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockBloggingEventServiceClientMockRecorder) CreateArticle(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).CreateArticle), varargs...)
}

// DetachTag mocks base method.
func (m *MockBloggingEventServiceClient) DetachTag(ctx context.Context, in *bloggingevent.DetachTagRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachTag", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTag indicates an expected call of DetachTag.
func (mr *MockBloggingEventServiceClientMockRecorder) DetachTag(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTag", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).DetachTag), varargs...)
}

// UpdateArticleBody mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleBody(ctx context.Context, in *bloggingevent.UpdateArticleBodyRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArticleBody", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleBody indicates an expected call of UpdateArticleBody.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleBody(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleBody", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleBody), varargs...)
}

// UpdateArticleThumbnail mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleThumbnail(ctx context.Context, in *bloggingevent.UpdateArticleThumbnailRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArticleThumbnail", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleThumbnail indicates an expected call of UpdateArticleThumbnail.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleThumbnail(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleThumbnail", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleThumbnail), varargs...)
}

// UpdateArticleTitle mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleTitle(ctx context.Context, in *bloggingevent.UpdateArticleTitleRequest, opts ...grpc.CallOption) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArticleTitle", varargs...)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleTitle indicates an expected call of UpdateArticleTitle.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleTitle(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleTitle", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleTitle), varargs...)
}

// UploadImage mocks base method.
func (m *MockBloggingEventServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[bloggingevent.UploadImageRequest, bloggingevent.UploadImageResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadImage", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[bloggingevent.UploadImageRequest, bloggingevent.UploadImageResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockBloggingEventServiceClientMockRecorder) UploadImage(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UploadImage), varargs...)
}

// MockBloggingEventServiceServer is a mock of BloggingEventServiceServer interface.
type MockBloggingEventServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBloggingEventServiceServerMockRecorder
	isgomock struct{}
}

// MockBloggingEventServiceServerMockRecorder is the mock recorder for MockBloggingEventServiceServer.
type MockBloggingEventServiceServerMockRecorder struct {
	mock *MockBloggingEventServiceServer
}

// NewMockBloggingEventServiceServer creates a new mock instance.
func NewMockBloggingEventServiceServer(ctrl *gomock.Controller) *MockBloggingEventServiceServer {
	mock := &MockBloggingEventServiceServer{ctrl: ctrl}
	mock.recorder = &MockBloggingEventServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloggingEventServiceServer) EXPECT() *MockBloggingEventServiceServerMockRecorder {
	return m.recorder
}

// AttachTag mocks base method.
func (m *MockBloggingEventServiceServer) AttachTag(arg0 context.Context, arg1 *bloggingevent.AttachTagRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTag", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTag indicates an expected call of AttachTag.
func (mr *MockBloggingEventServiceServerMockRecorder) AttachTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTag", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).AttachTag), arg0, arg1)
}

// CreateArticle mocks base method.
func (m *MockBloggingEventServiceServer) CreateArticle(arg0 context.Context, arg1 *bloggingevent.CreateArticleRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockBloggingEventServiceServerMockRecorder) CreateArticle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).CreateArticle), arg0, arg1)
}

// DetachTag mocks base method.
func (m *MockBloggingEventServiceServer) DetachTag(arg0 context.Context, arg1 *bloggingevent.DetachTagRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTag", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTag indicates an expected call of DetachTag.
func (mr *MockBloggingEventServiceServerMockRecorder) DetachTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTag", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).DetachTag), arg0, arg1)
}

// UpdateArticleBody mocks base method.
func (m *MockBloggingEventServiceServer) UpdateArticleBody(arg0 context.Context, arg1 *bloggingevent.UpdateArticleBodyRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleBody", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleBody indicates an expected call of UpdateArticleBody.
func (mr *MockBloggingEventServiceServerMockRecorder) UpdateArticleBody(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleBody", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).UpdateArticleBody), arg0, arg1)
}

// UpdateArticleThumbnail mocks base method.
func (m *MockBloggingEventServiceServer) UpdateArticleThumbnail(arg0 context.Context, arg1 *bloggingevent.UpdateArticleThumbnailRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleThumbnail", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleThumbnail indicates an expected call of UpdateArticleThumbnail.
func (mr *MockBloggingEventServiceServerMockRecorder) UpdateArticleThumbnail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleThumbnail", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).UpdateArticleThumbnail), arg0, arg1)
}

// UpdateArticleTitle mocks base method.
func (m *MockBloggingEventServiceServer) UpdateArticleTitle(arg0 context.Context, arg1 *bloggingevent.UpdateArticleTitleRequest) (*bloggingevent.BloggingEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleTitle", arg0, arg1)
	ret0, _ := ret[0].(*bloggingevent.BloggingEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleTitle indicates an expected call of UpdateArticleTitle.
func (mr *MockBloggingEventServiceServerMockRecorder) UpdateArticleTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleTitle", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).UpdateArticleTitle), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockBloggingEventServiceServer) UploadImage(arg0 grpc.ClientStreamingServer[bloggingevent.UploadImageRequest, bloggingevent.UploadImageResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockBloggingEventServiceServerMockRecorder) UploadImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).UploadImage), arg0)
}

// mustEmbedUnimplementedBloggingEventServiceServer mocks base method.
func (m *MockBloggingEventServiceServer) mustEmbedUnimplementedBloggingEventServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBloggingEventServiceServer")
}

// mustEmbedUnimplementedBloggingEventServiceServer indicates an expected call of mustEmbedUnimplementedBloggingEventServiceServer.
func (mr *MockBloggingEventServiceServerMockRecorder) mustEmbedUnimplementedBloggingEventServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBloggingEventServiceServer", reflect.TypeOf((*MockBloggingEventServiceServer)(nil).mustEmbedUnimplementedBloggingEventServiceServer))
}

// MockUnsafeBloggingEventServiceServer is a mock of UnsafeBloggingEventServiceServer interface.
type MockUnsafeBloggingEventServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBloggingEventServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeBloggingEventServiceServerMockRecorder is the mock recorder for MockUnsafeBloggingEventServiceServer.
type MockUnsafeBloggingEventServiceServerMockRecorder struct {
	mock *MockUnsafeBloggingEventServiceServer
}

// NewMockUnsafeBloggingEventServiceServer creates a new mock instance.
func NewMockUnsafeBloggingEventServiceServer(ctrl *gomock.Controller) *MockUnsafeBloggingEventServiceServer {
	mock := &MockUnsafeBloggingEventServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBloggingEventServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBloggingEventServiceServer) EXPECT() *MockUnsafeBloggingEventServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBloggingEventServiceServer mocks base method.
func (m *MockUnsafeBloggingEventServiceServer) mustEmbedUnimplementedBloggingEventServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBloggingEventServiceServer")
}

// mustEmbedUnimplementedBloggingEventServiceServer indicates an expected call of mustEmbedUnimplementedBloggingEventServiceServer.
func (mr *MockUnsafeBloggingEventServiceServerMockRecorder) mustEmbedUnimplementedBloggingEventServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBloggingEventServiceServer", reflect.TypeOf((*MockUnsafeBloggingEventServiceServer)(nil).mustEmbedUnimplementedBloggingEventServiceServer))
}
