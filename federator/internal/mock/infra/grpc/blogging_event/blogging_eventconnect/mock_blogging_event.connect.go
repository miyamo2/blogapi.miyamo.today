// Code generated by MockGen. DO NOT EDIT.
// Source: blogging_event.connect.go
//
// Generated by this command:
//
//	mockgen -source=blogging_event.connect.go -destination=../../../../mock/infra/grpc/blogging_event/blogging_eventconnect/mock_blogging_event.connect.go -package=blogging_eventconnect
//

// Package blogging_eventconnect is a generated GoMock package.
package blogging_eventconnect

import (
	context "context"
	reflect "reflect"

	blogging_event "blogapi.miyamo.today/federator/internal/infra/grpc/blogging_event"
	connect "connectrpc.com/connect"
	gomock "go.uber.org/mock/gomock"
)

// MockBloggingEventServiceClient is a mock of BloggingEventServiceClient interface.
type MockBloggingEventServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBloggingEventServiceClientMockRecorder
	isgomock struct{}
}

// MockBloggingEventServiceClientMockRecorder is the mock recorder for MockBloggingEventServiceClient.
type MockBloggingEventServiceClientMockRecorder struct {
	mock *MockBloggingEventServiceClient
}

// NewMockBloggingEventServiceClient creates a new mock instance.
func NewMockBloggingEventServiceClient(ctrl *gomock.Controller) *MockBloggingEventServiceClient {
	mock := &MockBloggingEventServiceClient{ctrl: ctrl}
	mock.recorder = &MockBloggingEventServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloggingEventServiceClient) EXPECT() *MockBloggingEventServiceClientMockRecorder {
	return m.recorder
}

// AttachTags mocks base method.
func (m *MockBloggingEventServiceClient) AttachTags(arg0 context.Context, arg1 *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTags indicates an expected call of AttachTags.
func (mr *MockBloggingEventServiceClientMockRecorder) AttachTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTags", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).AttachTags), arg0, arg1)
}

// CreateArticle mocks base method.
func (m *MockBloggingEventServiceClient) CreateArticle(arg0 context.Context, arg1 *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockBloggingEventServiceClientMockRecorder) CreateArticle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).CreateArticle), arg0, arg1)
}

// DetachTags mocks base method.
func (m *MockBloggingEventServiceClient) DetachTags(arg0 context.Context, arg1 *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTags indicates an expected call of DetachTags.
func (mr *MockBloggingEventServiceClientMockRecorder) DetachTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTags", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).DetachTags), arg0, arg1)
}

// UpdateArticleBody mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleBody(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleBody", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleBody indicates an expected call of UpdateArticleBody.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleBody(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleBody", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleBody), arg0, arg1)
}

// UpdateArticleThumbnail mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleThumbnail(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleThumbnail", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleThumbnail indicates an expected call of UpdateArticleThumbnail.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleThumbnail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleThumbnail", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleThumbnail), arg0, arg1)
}

// UpdateArticleTitle mocks base method.
func (m *MockBloggingEventServiceClient) UpdateArticleTitle(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleTitle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleTitle indicates an expected call of UpdateArticleTitle.
func (mr *MockBloggingEventServiceClientMockRecorder) UpdateArticleTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleTitle", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UpdateArticleTitle), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockBloggingEventServiceClient) UploadImage(arg0 context.Context) *connect.ClientStreamForClient[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0)
	ret0, _ := ret[0].(*connect.ClientStreamForClient[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse])
	return ret0
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockBloggingEventServiceClientMockRecorder) UploadImage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockBloggingEventServiceClient)(nil).UploadImage), arg0)
}

// MockBloggingEventServiceHandler is a mock of BloggingEventServiceHandler interface.
type MockBloggingEventServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBloggingEventServiceHandlerMockRecorder
	isgomock struct{}
}

// MockBloggingEventServiceHandlerMockRecorder is the mock recorder for MockBloggingEventServiceHandler.
type MockBloggingEventServiceHandlerMockRecorder struct {
	mock *MockBloggingEventServiceHandler
}

// NewMockBloggingEventServiceHandler creates a new mock instance.
func NewMockBloggingEventServiceHandler(ctrl *gomock.Controller) *MockBloggingEventServiceHandler {
	mock := &MockBloggingEventServiceHandler{ctrl: ctrl}
	mock.recorder = &MockBloggingEventServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloggingEventServiceHandler) EXPECT() *MockBloggingEventServiceHandlerMockRecorder {
	return m.recorder
}

// AttachTags mocks base method.
func (m *MockBloggingEventServiceHandler) AttachTags(arg0 context.Context, arg1 *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTags indicates an expected call of AttachTags.
func (mr *MockBloggingEventServiceHandlerMockRecorder) AttachTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTags", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).AttachTags), arg0, arg1)
}

// CreateArticle mocks base method.
func (m *MockBloggingEventServiceHandler) CreateArticle(arg0 context.Context, arg1 *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockBloggingEventServiceHandlerMockRecorder) CreateArticle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).CreateArticle), arg0, arg1)
}

// DetachTags mocks base method.
func (m *MockBloggingEventServiceHandler) DetachTags(arg0 context.Context, arg1 *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTags indicates an expected call of DetachTags.
func (mr *MockBloggingEventServiceHandlerMockRecorder) DetachTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTags", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).DetachTags), arg0, arg1)
}

// UpdateArticleBody mocks base method.
func (m *MockBloggingEventServiceHandler) UpdateArticleBody(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleBody", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleBody indicates an expected call of UpdateArticleBody.
func (mr *MockBloggingEventServiceHandlerMockRecorder) UpdateArticleBody(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleBody", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).UpdateArticleBody), arg0, arg1)
}

// UpdateArticleThumbnail mocks base method.
func (m *MockBloggingEventServiceHandler) UpdateArticleThumbnail(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleThumbnail", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleThumbnail indicates an expected call of UpdateArticleThumbnail.
func (mr *MockBloggingEventServiceHandlerMockRecorder) UpdateArticleThumbnail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleThumbnail", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).UpdateArticleThumbnail), arg0, arg1)
}

// UpdateArticleTitle mocks base method.
func (m *MockBloggingEventServiceHandler) UpdateArticleTitle(arg0 context.Context, arg1 *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleTitle", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.BloggingEventResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleTitle indicates an expected call of UpdateArticleTitle.
func (mr *MockBloggingEventServiceHandlerMockRecorder) UpdateArticleTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleTitle", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).UpdateArticleTitle), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockBloggingEventServiceHandler) UploadImage(arg0 context.Context, arg1 *connect.ClientStream[blogging_event.UploadImageRequest]) (*connect.Response[blogging_event.UploadImageResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[blogging_event.UploadImageResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockBloggingEventServiceHandlerMockRecorder) UploadImage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockBloggingEventServiceHandler)(nil).UploadImage), arg0, arg1)
}
