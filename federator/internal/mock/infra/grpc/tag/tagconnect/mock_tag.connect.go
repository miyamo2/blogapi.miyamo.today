// Code generated by MockGen. DO NOT EDIT.
// Source: tag.connect.go
//
// Generated by this command:
//
//	mockgen -source=tag.connect.go -destination=../../../../mock/infra/grpc/tag/tagconnect/mock_tag.connect.go -package=tagconnect
//

// Package tagconnect is a generated GoMock package.
package tagconnect

import (
	context "context"
	reflect "reflect"

	tag "blogapi.miyamo.today/federator/internal/infra/grpc/tag"
	connect "connectrpc.com/connect"
	gomock "go.uber.org/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTagServiceClient is a mock of TagServiceClient interface.
type MockTagServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceClientMockRecorder
	isgomock struct{}
}

// MockTagServiceClientMockRecorder is the mock recorder for MockTagServiceClient.
type MockTagServiceClientMockRecorder struct {
	mock *MockTagServiceClient
}

// NewMockTagServiceClient creates a new mock instance.
func NewMockTagServiceClient(ctrl *gomock.Controller) *MockTagServiceClient {
	mock := &MockTagServiceClient{ctrl: ctrl}
	mock.recorder = &MockTagServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagServiceClient) EXPECT() *MockTagServiceClientMockRecorder {
	return m.recorder
}

// GetAllTags mocks base method.
func (m *MockTagServiceClient) GetAllTags(arg0 context.Context, arg1 *connect.Request[emptypb.Empty]) (*connect.Response[tag.GetAllTagsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetAllTagsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagServiceClientMockRecorder) GetAllTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetAllTags), arg0, arg1)
}

// GetNextTags mocks base method.
func (m *MockTagServiceClient) GetNextTags(arg0 context.Context, arg1 *connect.Request[tag.GetNextTagsRequest]) (*connect.Response[tag.GetNextTagResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetNextTagResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextTags indicates an expected call of GetNextTags.
func (mr *MockTagServiceClientMockRecorder) GetNextTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetNextTags), arg0, arg1)
}

// GetPrevTags mocks base method.
func (m *MockTagServiceClient) GetPrevTags(arg0 context.Context, arg1 *connect.Request[tag.GetPrevTagsRequest]) (*connect.Response[tag.GetPrevTagResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetPrevTagResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevTags indicates an expected call of GetPrevTags.
func (mr *MockTagServiceClientMockRecorder) GetPrevTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetPrevTags), arg0, arg1)
}

// GetTagById mocks base method.
func (m *MockTagServiceClient) GetTagById(arg0 context.Context, arg1 *connect.Request[tag.GetTagByIdRequest]) (*connect.Response[tag.GetTagByIdResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetTagByIdResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagServiceClientMockRecorder) GetTagById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagServiceClient)(nil).GetTagById), arg0, arg1)
}

// MockTagServiceHandler is a mock of TagServiceHandler interface.
type MockTagServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceHandlerMockRecorder
	isgomock struct{}
}

// MockTagServiceHandlerMockRecorder is the mock recorder for MockTagServiceHandler.
type MockTagServiceHandlerMockRecorder struct {
	mock *MockTagServiceHandler
}

// NewMockTagServiceHandler creates a new mock instance.
func NewMockTagServiceHandler(ctrl *gomock.Controller) *MockTagServiceHandler {
	mock := &MockTagServiceHandler{ctrl: ctrl}
	mock.recorder = &MockTagServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagServiceHandler) EXPECT() *MockTagServiceHandlerMockRecorder {
	return m.recorder
}

// GetAllTags mocks base method.
func (m *MockTagServiceHandler) GetAllTags(arg0 context.Context, arg1 *connect.Request[emptypb.Empty]) (*connect.Response[tag.GetAllTagsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetAllTagsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagServiceHandlerMockRecorder) GetAllTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagServiceHandler)(nil).GetAllTags), arg0, arg1)
}

// GetNextTags mocks base method.
func (m *MockTagServiceHandler) GetNextTags(arg0 context.Context, arg1 *connect.Request[tag.GetNextTagsRequest]) (*connect.Response[tag.GetNextTagResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetNextTagResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextTags indicates an expected call of GetNextTags.
func (mr *MockTagServiceHandlerMockRecorder) GetNextTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextTags", reflect.TypeOf((*MockTagServiceHandler)(nil).GetNextTags), arg0, arg1)
}

// GetPrevTags mocks base method.
func (m *MockTagServiceHandler) GetPrevTags(arg0 context.Context, arg1 *connect.Request[tag.GetPrevTagsRequest]) (*connect.Response[tag.GetPrevTagResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevTags", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetPrevTagResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevTags indicates an expected call of GetPrevTags.
func (mr *MockTagServiceHandlerMockRecorder) GetPrevTags(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevTags", reflect.TypeOf((*MockTagServiceHandler)(nil).GetPrevTags), arg0, arg1)
}

// GetTagById mocks base method.
func (m *MockTagServiceHandler) GetTagById(arg0 context.Context, arg1 *connect.Request[tag.GetTagByIdRequest]) (*connect.Response[tag.GetTagByIdResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[tag.GetTagByIdResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagServiceHandlerMockRecorder) GetTagById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagServiceHandler)(nil).GetTagById), arg0, arg1)
}
