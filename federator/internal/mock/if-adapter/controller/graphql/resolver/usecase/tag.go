// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go
//
// Generated by this command:
//
//	mockgen -source=tag.go -destination=../../../../../mock/if-adapter/controller/graphql/resolver/usecase/tag.go -package=usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	dto "github.com/miyamo2/blogapi.miyamo.today/federator/internal/app/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockTag is a mock of Tag interface.
type MockTag struct {
	ctrl     *gomock.Controller
	recorder *MockTagMockRecorder
	isgomock struct{}
}

// MockTagMockRecorder is the mock recorder for MockTag.
type MockTagMockRecorder struct {
	mock *MockTag
}

// NewMockTag creates a new mock instance.
func NewMockTag(ctrl *gomock.Controller) *MockTag {
	mock := &MockTag{ctrl: ctrl}
	mock.recorder = &MockTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTag) EXPECT() *MockTagMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTag) Execute(ctx context.Context, in dto.TagInDTO) (dto.TagOutDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(dto.TagOutDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTagMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTag)(nil).Execute), ctx, in)
}

// MockTags is a mock of Tags interface.
type MockTags struct {
	ctrl     *gomock.Controller
	recorder *MockTagsMockRecorder
	isgomock struct{}
}

// MockTagsMockRecorder is the mock recorder for MockTags.
type MockTagsMockRecorder struct {
	mock *MockTags
}

// NewMockTags creates a new mock instance.
func NewMockTags(ctrl *gomock.Controller) *MockTags {
	mock := &MockTags{ctrl: ctrl}
	mock.recorder = &MockTagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTags) EXPECT() *MockTagsMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTags) Execute(ctx context.Context, in dto.TagsInDTO) (dto.TagsOutDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(dto.TagsOutDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockTagsMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTags)(nil).Execute), ctx, in)
}
