package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"log/slog"

	"blogapi.miyamo.today/core/log"
	"blogapi.miyamo.today/federator/internal/app/usecase/dto"
	"blogapi.miyamo.today/federator/internal/if-adapter/presenters/graphql/model"
	"github.com/miyamo2/altnrslog"
	"github.com/newrelic/go-agent/v3/integrations/nrpkgerrors"
	"github.com/newrelic/go-agent/v3/newrelic"
)

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, first *int, last *int, after *string, before *string) (*model.ArticleConnection, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("Articles").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters",
			slog.Any("first", first),
			slog.Any("last", last),
			slog.Any("after", after),
			slog.Any("before", before)))
	opts := make([]dto.ArticlesInDTOOption, 0, 4)
	if first != nil {
		opts = append(opts, dto.ArticlesInWithFirst(*first))
	}
	if last != nil {
		opts = append(opts, dto.ArticlesInWithLast(*last))
	}
	if after != nil {
		opts = append(opts, dto.ArticlesInWithAfter(*after))
	}
	if before != nil {
		opts = append(opts, dto.ArticlesInWithBefore(*before))
	}
	in, err := dto.NewArticlesInDTO(opts...)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger.WarnContext(ctx, "END",
			slog.Group("returns",
				slog.Any("*model.ArticleConnection", nil),
				slog.Any("error", err)))
		return nil, err
	}
	oDTO, err := r.usecases.articles.Execute(ctx, in)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger.WarnContext(ctx, "END",
			slog.Group("returns",
				slog.Any("*model.ArticleConnection", nil),
				slog.Any("error", err)))
		return nil, err
	}
	connection, ok := r.converters.articles.ToArticles(ctx, oDTO)
	if !ok {
		err := ErrFailedToConvertToArticleConnection
		logger.InfoContext(ctx, "END",
			slog.Group("returns",
				slog.Any("*model.ArticleConnection", nil),
				slog.Any("error", err)))
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		return nil, err
	}
	logger.InfoContext(ctx, "END",
		slog.Group("returns",
			slog.Any("*model.ArticleConnection", &connection),
			slog.Any("error", nil)))
	return connection, nil
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.ArticleNode, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("Article").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("id", id)))
	oDTO, err := r.usecases.article.Execute(ctx, dto.NewArticleInDTO(id))
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger.WarnContext(ctx, "END",
			slog.Group("returns",
				slog.Any("*model.ArticleNode", nil),
				slog.Any("error", err)))
		return nil, err
	}
	node, ok := r.converters.article.ToArticle(ctx, oDTO)
	if !ok {
		err := ErrFailedToConvertToArticleNode
		logger.InfoContext(ctx, "END",
			slog.Group("returns",
				slog.Any("*model.ArticleNode", nil),
				slog.Any("error", err)))
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		return nil, err
	}
	logger.InfoContext(ctx, "END",
		slog.Group("returns",
			slog.Any("*model.ArticleNode", &node),
			slog.Any("error", nil)))
	return node, nil
}
