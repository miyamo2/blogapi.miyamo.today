package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"fmt"
	"log/slog"
	"net/url"

	"blogapi.miyamo.today/core/log"
	"blogapi.miyamo.today/federator/internal/app/usecase/dto"
	"blogapi.miyamo.today/federator/internal/if-adapter/presenters/graphql/model"
	"github.com/miyamo2/altnrslog"
	"github.com/newrelic/go-agent/v3/integrations/nrpkgerrors"
	"github.com/newrelic/go-agent/v3/newrelic"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.CreateArticleInput) (*model.CreateArticlePayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("CreateArticle").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}
	outDTO, err := r.usecases.createArticle.Execute(ctx, dto.NewCreateArticleInDTO(input.Title, input.Content, url.URL(input.ThumbnailURL), input.TagNames, clientMutationID))
	if err != nil {
		return nil, err
	}

	payload, err := r.converters.createArticle.ToCreateArticle(ctx, outDTO)
	if err != nil {
		return nil, err
	}
	return payload, err
}

// UpdateArticleTitle is the resolver for the updateArticleTitle field.
func (r *mutationResolver) UpdateArticleTitle(ctx context.Context, input model.UpdateArticleTitleInput) (*model.UpdateArticleTitlePayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("UpdateArticleTitle").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.updateArticleTitle.Execute(ctx, dto.NewUpdateArticleTitleInDTO(input.ArticleID, input.Title, clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.updateArticleTitle.ToUpdateArticleTitle(ctx, outDTO)
}

// UpdateArticleBody is the resolver for the updateArticleBody field.
func (r *mutationResolver) UpdateArticleBody(ctx context.Context, input model.UpdateArticleBodyInput) (*model.UpdateArticleBodyPayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("UpdateArticleBody").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.updateArticleBody.Execute(ctx, dto.NewUpdateArticleBodyInDTO(input.ArticleID, input.Content, clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.updateArticleBody.ToUpdateArticleBody(ctx, outDTO)
}

// UpdateArticleThumbnail is the resolver for the updateArticleThumbnail field.
func (r *mutationResolver) UpdateArticleThumbnail(ctx context.Context, input model.UpdateArticleThumbnailInput) (*model.UpdateArticleThumbnailPayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("UpdateArticleBody").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.updateArticleThumbnail.Execute(ctx, dto.NewUpdateArticleThumbnailInDTO(input.ArticleID, url.URL(input.ThumbnailURL), clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.updateArticleThumbnail.ToUpdateArticleThumbnail(ctx, outDTO)
}

// AttachTags is the resolver for the attachTags field.
func (r *mutationResolver) AttachTags(ctx context.Context, input model.AttachTagsInput) (*model.AttachTagsPayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("AttachTags").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.attachTags.Execute(ctx, dto.NewAttachTagsInDTO(input.ArticleID, input.TagNames, clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.attachTags.ToAttachTags(ctx, outDTO)
}

// DetachTags is the resolver for the detachTags field.
func (r *mutationResolver) DetachTags(ctx context.Context, input model.DetachTagsInput) (*model.DetachTagsPayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("DetachTags").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.detachTags.Execute(ctx, dto.NewDetachTagsInDTO(input.ArticleID, input.TagNames, clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.detachTags.ToDetachTags(ctx, outDTO)
}

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, input model.UploadImageInput) (*model.UploadImagePayload, error) {
	nrtx := newrelic.FromContext(ctx)
	defer nrtx.StartSegment("UploadImage").End()

	logger, err := altnrslog.FromContext(ctx)
	if err != nil {
		err = ErrorWithStack(err)
		nrtx.NoticeError(nrpkgerrors.Wrap(err))
		logger = log.DefaultLogger()
	}
	logger.InfoContext(ctx, "BEGIN",
		slog.Group("parameters", slog.String("input", fmt.Sprintf("%+v", input))))

	var clientMutationID string
	if input.ClientMutationID != nil {
		clientMutationID = *input.ClientMutationID
	}

	outDTO, err := r.usecases.uploadImage.Execute(ctx, dto.NewUploadImageInDTO(input.Image.File, input.Image.Filename, input.Image.ContentType, clientMutationID))
	if err != nil {
		return nil, err
	}

	return r.converters.uploadImage.ToUploadImage(ctx, outDTO)
}
