// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blogging_event/blogging_event.proto

package blogging_eventconnect

import (
	blogging_event "blogapi.miyamo.today/federator/internal/infra/grpc/blogging_event"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BloggingEventServiceName is the fully-qualified name of the BloggingEventService service.
	BloggingEventServiceName = "blogging_event.BloggingEventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BloggingEventServiceCreateArticleProcedure is the fully-qualified name of the
	// BloggingEventService's CreateArticle RPC.
	BloggingEventServiceCreateArticleProcedure = "/blogging_event.BloggingEventService/CreateArticle"
	// BloggingEventServiceUpdateArticleTitleProcedure is the fully-qualified name of the
	// BloggingEventService's UpdateArticleTitle RPC.
	BloggingEventServiceUpdateArticleTitleProcedure = "/blogging_event.BloggingEventService/UpdateArticleTitle"
	// BloggingEventServiceUpdateArticleBodyProcedure is the fully-qualified name of the
	// BloggingEventService's UpdateArticleBody RPC.
	BloggingEventServiceUpdateArticleBodyProcedure = "/blogging_event.BloggingEventService/UpdateArticleBody"
	// BloggingEventServiceUpdateArticleThumbnailProcedure is the fully-qualified name of the
	// BloggingEventService's UpdateArticleThumbnail RPC.
	BloggingEventServiceUpdateArticleThumbnailProcedure = "/blogging_event.BloggingEventService/UpdateArticleThumbnail"
	// BloggingEventServiceAttachTagsProcedure is the fully-qualified name of the BloggingEventService's
	// AttachTags RPC.
	BloggingEventServiceAttachTagsProcedure = "/blogging_event.BloggingEventService/AttachTags"
	// BloggingEventServiceDetachTagsProcedure is the fully-qualified name of the BloggingEventService's
	// DetachTags RPC.
	BloggingEventServiceDetachTagsProcedure = "/blogging_event.BloggingEventService/DetachTags"
	// BloggingEventServiceUploadImageProcedure is the fully-qualified name of the
	// BloggingEventService's UploadImage RPC.
	BloggingEventServiceUploadImageProcedure = "/blogging_event.BloggingEventService/UploadImage"
)

// BloggingEventServiceClient is a client for the blogging_event.BloggingEventService service.
type BloggingEventServiceClient interface {
	CreateArticle(context.Context, *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleTitle(context.Context, *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleBody(context.Context, *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleThumbnail(context.Context, *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	AttachTags(context.Context, *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	DetachTags(context.Context, *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UploadImage(context.Context) *connect.ClientStreamForClient[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse]
}

// NewBloggingEventServiceClient constructs a client for the blogging_event.BloggingEventService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBloggingEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BloggingEventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bloggingEventServiceMethods := blogging_event.File_blogging_event_blogging_event_proto.Services().ByName("BloggingEventService").Methods()
	return &bloggingEventServiceClient{
		createArticle: connect.NewClient[blogging_event.CreateArticleRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceCreateArticleProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("CreateArticle")),
			connect.WithClientOptions(opts...),
		),
		updateArticleTitle: connect.NewClient[blogging_event.UpdateArticleTitleRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceUpdateArticleTitleProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleTitle")),
			connect.WithClientOptions(opts...),
		),
		updateArticleBody: connect.NewClient[blogging_event.UpdateArticleBodyRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceUpdateArticleBodyProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleBody")),
			connect.WithClientOptions(opts...),
		),
		updateArticleThumbnail: connect.NewClient[blogging_event.UpdateArticleThumbnailRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceUpdateArticleThumbnailProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleThumbnail")),
			connect.WithClientOptions(opts...),
		),
		attachTags: connect.NewClient[blogging_event.AttachTagsRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceAttachTagsProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("AttachTags")),
			connect.WithClientOptions(opts...),
		),
		detachTags: connect.NewClient[blogging_event.DetachTagsRequest, blogging_event.BloggingEventResponse](
			httpClient,
			baseURL+BloggingEventServiceDetachTagsProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("DetachTags")),
			connect.WithClientOptions(opts...),
		),
		uploadImage: connect.NewClient[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse](
			httpClient,
			baseURL+BloggingEventServiceUploadImageProcedure,
			connect.WithSchema(bloggingEventServiceMethods.ByName("UploadImage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bloggingEventServiceClient implements BloggingEventServiceClient.
type bloggingEventServiceClient struct {
	createArticle          *connect.Client[blogging_event.CreateArticleRequest, blogging_event.BloggingEventResponse]
	updateArticleTitle     *connect.Client[blogging_event.UpdateArticleTitleRequest, blogging_event.BloggingEventResponse]
	updateArticleBody      *connect.Client[blogging_event.UpdateArticleBodyRequest, blogging_event.BloggingEventResponse]
	updateArticleThumbnail *connect.Client[blogging_event.UpdateArticleThumbnailRequest, blogging_event.BloggingEventResponse]
	attachTags             *connect.Client[blogging_event.AttachTagsRequest, blogging_event.BloggingEventResponse]
	detachTags             *connect.Client[blogging_event.DetachTagsRequest, blogging_event.BloggingEventResponse]
	uploadImage            *connect.Client[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse]
}

// CreateArticle calls blogging_event.BloggingEventService.CreateArticle.
func (c *bloggingEventServiceClient) CreateArticle(ctx context.Context, req *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.createArticle.CallUnary(ctx, req)
}

// UpdateArticleTitle calls blogging_event.BloggingEventService.UpdateArticleTitle.
func (c *bloggingEventServiceClient) UpdateArticleTitle(ctx context.Context, req *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.updateArticleTitle.CallUnary(ctx, req)
}

// UpdateArticleBody calls blogging_event.BloggingEventService.UpdateArticleBody.
func (c *bloggingEventServiceClient) UpdateArticleBody(ctx context.Context, req *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.updateArticleBody.CallUnary(ctx, req)
}

// UpdateArticleThumbnail calls blogging_event.BloggingEventService.UpdateArticleThumbnail.
func (c *bloggingEventServiceClient) UpdateArticleThumbnail(ctx context.Context, req *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.updateArticleThumbnail.CallUnary(ctx, req)
}

// AttachTags calls blogging_event.BloggingEventService.AttachTags.
func (c *bloggingEventServiceClient) AttachTags(ctx context.Context, req *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.attachTags.CallUnary(ctx, req)
}

// DetachTags calls blogging_event.BloggingEventService.DetachTags.
func (c *bloggingEventServiceClient) DetachTags(ctx context.Context, req *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return c.detachTags.CallUnary(ctx, req)
}

// UploadImage calls blogging_event.BloggingEventService.UploadImage.
func (c *bloggingEventServiceClient) UploadImage(ctx context.Context) *connect.ClientStreamForClient[blogging_event.UploadImageRequest, blogging_event.UploadImageResponse] {
	return c.uploadImage.CallClientStream(ctx)
}

// BloggingEventServiceHandler is an implementation of the blogging_event.BloggingEventService
// service.
type BloggingEventServiceHandler interface {
	CreateArticle(context.Context, *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleTitle(context.Context, *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleBody(context.Context, *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UpdateArticleThumbnail(context.Context, *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	AttachTags(context.Context, *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	DetachTags(context.Context, *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error)
	UploadImage(context.Context, *connect.ClientStream[blogging_event.UploadImageRequest]) (*connect.Response[blogging_event.UploadImageResponse], error)
}

// NewBloggingEventServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBloggingEventServiceHandler(svc BloggingEventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bloggingEventServiceMethods := blogging_event.File_blogging_event_blogging_event_proto.Services().ByName("BloggingEventService").Methods()
	bloggingEventServiceCreateArticleHandler := connect.NewUnaryHandler(
		BloggingEventServiceCreateArticleProcedure,
		svc.CreateArticle,
		connect.WithSchema(bloggingEventServiceMethods.ByName("CreateArticle")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceUpdateArticleTitleHandler := connect.NewUnaryHandler(
		BloggingEventServiceUpdateArticleTitleProcedure,
		svc.UpdateArticleTitle,
		connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleTitle")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceUpdateArticleBodyHandler := connect.NewUnaryHandler(
		BloggingEventServiceUpdateArticleBodyProcedure,
		svc.UpdateArticleBody,
		connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleBody")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceUpdateArticleThumbnailHandler := connect.NewUnaryHandler(
		BloggingEventServiceUpdateArticleThumbnailProcedure,
		svc.UpdateArticleThumbnail,
		connect.WithSchema(bloggingEventServiceMethods.ByName("UpdateArticleThumbnail")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceAttachTagsHandler := connect.NewUnaryHandler(
		BloggingEventServiceAttachTagsProcedure,
		svc.AttachTags,
		connect.WithSchema(bloggingEventServiceMethods.ByName("AttachTags")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceDetachTagsHandler := connect.NewUnaryHandler(
		BloggingEventServiceDetachTagsProcedure,
		svc.DetachTags,
		connect.WithSchema(bloggingEventServiceMethods.ByName("DetachTags")),
		connect.WithHandlerOptions(opts...),
	)
	bloggingEventServiceUploadImageHandler := connect.NewClientStreamHandler(
		BloggingEventServiceUploadImageProcedure,
		svc.UploadImage,
		connect.WithSchema(bloggingEventServiceMethods.ByName("UploadImage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/blogging_event.BloggingEventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BloggingEventServiceCreateArticleProcedure:
			bloggingEventServiceCreateArticleHandler.ServeHTTP(w, r)
		case BloggingEventServiceUpdateArticleTitleProcedure:
			bloggingEventServiceUpdateArticleTitleHandler.ServeHTTP(w, r)
		case BloggingEventServiceUpdateArticleBodyProcedure:
			bloggingEventServiceUpdateArticleBodyHandler.ServeHTTP(w, r)
		case BloggingEventServiceUpdateArticleThumbnailProcedure:
			bloggingEventServiceUpdateArticleThumbnailHandler.ServeHTTP(w, r)
		case BloggingEventServiceAttachTagsProcedure:
			bloggingEventServiceAttachTagsHandler.ServeHTTP(w, r)
		case BloggingEventServiceDetachTagsProcedure:
			bloggingEventServiceDetachTagsHandler.ServeHTTP(w, r)
		case BloggingEventServiceUploadImageProcedure:
			bloggingEventServiceUploadImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBloggingEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBloggingEventServiceHandler struct{}

func (UnimplementedBloggingEventServiceHandler) CreateArticle(context.Context, *connect.Request[blogging_event.CreateArticleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.CreateArticle is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) UpdateArticleTitle(context.Context, *connect.Request[blogging_event.UpdateArticleTitleRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.UpdateArticleTitle is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) UpdateArticleBody(context.Context, *connect.Request[blogging_event.UpdateArticleBodyRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.UpdateArticleBody is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) UpdateArticleThumbnail(context.Context, *connect.Request[blogging_event.UpdateArticleThumbnailRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.UpdateArticleThumbnail is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) AttachTags(context.Context, *connect.Request[blogging_event.AttachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.AttachTags is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) DetachTags(context.Context, *connect.Request[blogging_event.DetachTagsRequest]) (*connect.Response[blogging_event.BloggingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.DetachTags is not implemented"))
}

func (UnimplementedBloggingEventServiceHandler) UploadImage(context.Context, *connect.ClientStream[blogging_event.UploadImageRequest]) (*connect.Response[blogging_event.UploadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blogging_event.BloggingEventService.UploadImage is not implemented"))
}
