// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: blogging_event.proto

package bloggingevent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BloggingEventService_CreateArticle_FullMethodName          = "/blogging_event.BloggingEventService/CreateArticle"
	BloggingEventService_UpdateArticleTitle_FullMethodName     = "/blogging_event.BloggingEventService/UpdateArticleTitle"
	BloggingEventService_UpdateArticleBody_FullMethodName      = "/blogging_event.BloggingEventService/UpdateArticleBody"
	BloggingEventService_UpdateArticleThumbnail_FullMethodName = "/blogging_event.BloggingEventService/UpdateArticleThumbnail"
	BloggingEventService_AttachTags_FullMethodName             = "/blogging_event.BloggingEventService/AttachTags"
	BloggingEventService_DetachTags_FullMethodName             = "/blogging_event.BloggingEventService/DetachTags"
	BloggingEventService_UploadImage_FullMethodName            = "/blogging_event.BloggingEventService/UploadImage"
)

// BloggingEventServiceClient is the client API for BloggingEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloggingEventServiceClient interface {
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	UpdateArticleTitle(ctx context.Context, in *UpdateArticleTitleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	UpdateArticleBody(ctx context.Context, in *UpdateArticleBodyRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	UpdateArticleThumbnail(ctx context.Context, in *UpdateArticleThumbnailRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	AttachTags(ctx context.Context, in *AttachTagsRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	DetachTags(ctx context.Context, in *DetachTagsRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error)
}

type bloggingEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloggingEventServiceClient(cc grpc.ClientConnInterface) BloggingEventServiceClient {
	return &bloggingEventServiceClient{cc}
}

func (c *bloggingEventServiceClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_CreateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) UpdateArticleTitle(ctx context.Context, in *UpdateArticleTitleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_UpdateArticleTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) UpdateArticleBody(ctx context.Context, in *UpdateArticleBodyRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_UpdateArticleBody_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) UpdateArticleThumbnail(ctx context.Context, in *UpdateArticleThumbnailRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_UpdateArticleThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) AttachTags(ctx context.Context, in *AttachTagsRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_AttachTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) DetachTags(ctx context.Context, in *DetachTagsRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_DetachTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BloggingEventService_ServiceDesc.Streams[0], BloggingEventService_UploadImage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadImageRequest, UploadImageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BloggingEventService_UploadImageClient = grpc.ClientStreamingClient[UploadImageRequest, UploadImageResponse]

// BloggingEventServiceServer is the server API for BloggingEventService service.
// All implementations must embed UnimplementedBloggingEventServiceServer
// for forward compatibility.
type BloggingEventServiceServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*BloggingEventResponse, error)
	UpdateArticleTitle(context.Context, *UpdateArticleTitleRequest) (*BloggingEventResponse, error)
	UpdateArticleBody(context.Context, *UpdateArticleBodyRequest) (*BloggingEventResponse, error)
	UpdateArticleThumbnail(context.Context, *UpdateArticleThumbnailRequest) (*BloggingEventResponse, error)
	AttachTags(context.Context, *AttachTagsRequest) (*BloggingEventResponse, error)
	DetachTags(context.Context, *DetachTagsRequest) (*BloggingEventResponse, error)
	UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error
	mustEmbedUnimplementedBloggingEventServiceServer()
}

// UnimplementedBloggingEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBloggingEventServiceServer struct{}

func (UnimplementedBloggingEventServiceServer) CreateArticle(context.Context, *CreateArticleRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedBloggingEventServiceServer) UpdateArticleTitle(context.Context, *UpdateArticleTitleRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleTitle not implemented")
}
func (UnimplementedBloggingEventServiceServer) UpdateArticleBody(context.Context, *UpdateArticleBodyRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleBody not implemented")
}
func (UnimplementedBloggingEventServiceServer) UpdateArticleThumbnail(context.Context, *UpdateArticleThumbnailRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleThumbnail not implemented")
}
func (UnimplementedBloggingEventServiceServer) AttachTags(context.Context, *AttachTagsRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachTags not implemented")
}
func (UnimplementedBloggingEventServiceServer) DetachTags(context.Context, *DetachTagsRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachTags not implemented")
}
func (UnimplementedBloggingEventServiceServer) UploadImage(grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedBloggingEventServiceServer) mustEmbedUnimplementedBloggingEventServiceServer() {}
func (UnimplementedBloggingEventServiceServer) testEmbeddedByValue()                              {}

// UnsafeBloggingEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloggingEventServiceServer will
// result in compilation errors.
type UnsafeBloggingEventServiceServer interface {
	mustEmbedUnimplementedBloggingEventServiceServer()
}

func RegisterBloggingEventServiceServer(s grpc.ServiceRegistrar, srv BloggingEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedBloggingEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BloggingEventService_ServiceDesc, srv)
}

func _BloggingEventService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_UpdateArticleTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).UpdateArticleTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_UpdateArticleTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).UpdateArticleTitle(ctx, req.(*UpdateArticleTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_UpdateArticleBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).UpdateArticleBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_UpdateArticleBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).UpdateArticleBody(ctx, req.(*UpdateArticleBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_UpdateArticleThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).UpdateArticleThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_UpdateArticleThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).UpdateArticleThumbnail(ctx, req.(*UpdateArticleThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_AttachTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).AttachTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_AttachTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).AttachTags(ctx, req.(*AttachTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_DetachTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).DetachTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_DetachTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).DetachTags(ctx, req.(*DetachTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BloggingEventServiceServer).UploadImage(&grpc.GenericServerStream[UploadImageRequest, UploadImageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BloggingEventService_UploadImageServer = grpc.ClientStreamingServer[UploadImageRequest, UploadImageResponse]

// BloggingEventService_ServiceDesc is the grpc.ServiceDesc for BloggingEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloggingEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogging_event.BloggingEventService",
	HandlerType: (*BloggingEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _BloggingEventService_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticleTitle",
			Handler:    _BloggingEventService_UpdateArticleTitle_Handler,
		},
		{
			MethodName: "UpdateArticleBody",
			Handler:    _BloggingEventService_UpdateArticleBody_Handler,
		},
		{
			MethodName: "UpdateArticleThumbnail",
			Handler:    _BloggingEventService_UpdateArticleThumbnail_Handler,
		},
		{
			MethodName: "AttachTags",
			Handler:    _BloggingEventService_AttachTags_Handler,
		},
		{
			MethodName: "DetachTags",
			Handler:    _BloggingEventService_DetachTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _BloggingEventService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "blogging_event.proto",
}
