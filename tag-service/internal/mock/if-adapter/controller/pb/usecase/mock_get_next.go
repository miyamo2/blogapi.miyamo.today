// Code generated by MockGen. DO NOT EDIT.
// Source: get_next.go
//
// Generated by this command:
//
//	mockgen -source=get_next.go -destination=../../../../mock/if-adapter/controller/pb/usecase/mock_get_next.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	dto "github.com/miyamo2/blogapi.miyamo.today/tag-service/internal/app/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockGetNext is a mock of GetNext interface.
type MockGetNext struct {
	ctrl     *gomock.Controller
	recorder *MockGetNextMockRecorder
	isgomock struct{}
}

// MockGetNextMockRecorder is the mock recorder for MockGetNext.
type MockGetNextMockRecorder struct {
	mock *MockGetNext
}

// NewMockGetNext creates a new mock instance.
func NewMockGetNext(ctrl *gomock.Controller) *MockGetNext {
	mock := &MockGetNext{ctrl: ctrl}
	mock.recorder = &MockGetNextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetNext) EXPECT() *MockGetNextMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetNext) Execute(ctx context.Context, in dto.GetNextInDto) (*dto.GetNextOutDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, in)
	ret0, _ := ret[0].(*dto.GetNextOutDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetNextMockRecorder) Execute(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetNext)(nil).Execute), ctx, in)
}
