// Code generated by MockGen. DO NOT EDIT.
// Source: statement.go
//
// Generated by this command:
//
//	mockgen -source=statement.go -destination ../../tag-service/internal/mock/core/db/mock_statement.go -package mock_db
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	db "github.com/miyamo2/blogapi.miyamo.today/core/db"
	gomock "go.uber.org/mock/gomock"
)

// MockStatement is a mock of Statement interface.
type MockStatement struct {
	ctrl     *gomock.Controller
	recorder *MockStatementMockRecorder
}

// MockStatementMockRecorder is the mock recorder for MockStatement.
type MockStatementMockRecorder struct {
	mock *MockStatement
}

// NewMockStatement creates a new mock instance.
func NewMockStatement(ctrl *gomock.Controller) *MockStatement {
	mock := &MockStatement{ctrl: ctrl}
	mock.recorder = &MockStatementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatement) EXPECT() *MockStatementMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockStatement) Execute(ctx context.Context, opts ...db.ExecuteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockStatementMockRecorder) Execute(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStatement)(nil).Execute), varargs...)
}

// Result mocks base method.
func (m *MockStatement) Result() db.StatementResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(db.StatementResult)
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockStatementMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStatement)(nil).Result))
}

// MockStatementResult is a mock of StatementResult interface.
type MockStatementResult struct {
	ctrl     *gomock.Controller
	recorder *MockStatementResultMockRecorder
}

// MockStatementResultMockRecorder is the mock recorder for MockStatementResult.
type MockStatementResultMockRecorder struct {
	mock *MockStatementResult
}

// NewMockStatementResult creates a new mock instance.
func NewMockStatementResult(ctrl *gomock.Controller) *MockStatementResult {
	mock := &MockStatementResult{ctrl: ctrl}
	mock.recorder = &MockStatementResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatementResult) EXPECT() *MockStatementResultMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStatementResult) Get() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStatementResultMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatementResult)(nil).Get))
}

// Set mocks base method.
func (m *MockStatementResult) Set(v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", v)
}

// Set indicates an expected call of Set.
func (mr *MockStatementResultMockRecorder) Set(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStatementResult)(nil).Set), v)
}
