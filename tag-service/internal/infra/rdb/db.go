// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package rdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getByIDStmt, err = db.PrepareContext(ctx, getByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetByID: %w", err)
	}
	if q.listAfterStmt, err = db.PrepareContext(ctx, listAfter); err != nil {
		return nil, fmt.Errorf("error preparing query ListAfter: %w", err)
	}
	if q.listAfterWithLimitStmt, err = db.PrepareContext(ctx, listAfterWithLimit); err != nil {
		return nil, fmt.Errorf("error preparing query ListAfterWithLimit: %w", err)
	}
	if q.listAfterWithLimitAndCursorStmt, err = db.PrepareContext(ctx, listAfterWithLimitAndCursor); err != nil {
		return nil, fmt.Errorf("error preparing query ListAfterWithLimitAndCursor: %w", err)
	}
	if q.listBeforeStmt, err = db.PrepareContext(ctx, listBefore); err != nil {
		return nil, fmt.Errorf("error preparing query ListBefore: %w", err)
	}
	if q.listBeforeWithLimitStmt, err = db.PrepareContext(ctx, listBeforeWithLimit); err != nil {
		return nil, fmt.Errorf("error preparing query ListBeforeWithLimit: %w", err)
	}
	if q.listBeforeWithLimitAndCursorStmt, err = db.PrepareContext(ctx, listBeforeWithLimitAndCursor); err != nil {
		return nil, fmt.Errorf("error preparing query ListBeforeWithLimitAndCursor: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getByIDStmt != nil {
		if cerr := q.getByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByIDStmt: %w", cerr)
		}
	}
	if q.listAfterStmt != nil {
		if cerr := q.listAfterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAfterStmt: %w", cerr)
		}
	}
	if q.listAfterWithLimitStmt != nil {
		if cerr := q.listAfterWithLimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAfterWithLimitStmt: %w", cerr)
		}
	}
	if q.listAfterWithLimitAndCursorStmt != nil {
		if cerr := q.listAfterWithLimitAndCursorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAfterWithLimitAndCursorStmt: %w", cerr)
		}
	}
	if q.listBeforeStmt != nil {
		if cerr := q.listBeforeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBeforeStmt: %w", cerr)
		}
	}
	if q.listBeforeWithLimitStmt != nil {
		if cerr := q.listBeforeWithLimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBeforeWithLimitStmt: %w", cerr)
		}
	}
	if q.listBeforeWithLimitAndCursorStmt != nil {
		if cerr := q.listBeforeWithLimitAndCursorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBeforeWithLimitAndCursorStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	getByIDStmt                      *sql.Stmt
	listAfterStmt                    *sql.Stmt
	listAfterWithLimitStmt           *sql.Stmt
	listAfterWithLimitAndCursorStmt  *sql.Stmt
	listBeforeStmt                   *sql.Stmt
	listBeforeWithLimitStmt          *sql.Stmt
	listBeforeWithLimitAndCursorStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		getByIDStmt:                      q.getByIDStmt,
		listAfterStmt:                    q.listAfterStmt,
		listAfterWithLimitStmt:           q.listAfterWithLimitStmt,
		listAfterWithLimitAndCursorStmt:  q.listAfterWithLimitAndCursorStmt,
		listBeforeStmt:                   q.listBeforeStmt,
		listBeforeWithLimitStmt:          q.listBeforeWithLimitStmt,
		listBeforeWithLimitAndCursorStmt: q.listBeforeWithLimitAndCursorStmt,
	}
}
