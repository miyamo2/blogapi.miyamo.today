// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tag/tag.proto

package grpcconnect

import (
	grpc "blogapi.miyamo.today/tag-service/internal/infra/grpc"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "tag.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagServiceGetTagByIdProcedure is the fully-qualified name of the TagService's GetTagById RPC.
	TagServiceGetTagByIdProcedure = "/tag.TagService/GetTagById"
	// TagServiceGetAllTagsProcedure is the fully-qualified name of the TagService's GetAllTags RPC.
	TagServiceGetAllTagsProcedure = "/tag.TagService/GetAllTags"
	// TagServiceGetNextTagsProcedure is the fully-qualified name of the TagService's GetNextTags RPC.
	TagServiceGetNextTagsProcedure = "/tag.TagService/GetNextTags"
	// TagServiceGetPrevTagsProcedure is the fully-qualified name of the TagService's GetPrevTags RPC.
	TagServiceGetPrevTagsProcedure = "/tag.TagService/GetPrevTags"
)

// TagServiceClient is a client for the tag.TagService service.
type TagServiceClient interface {
	GetTagById(context.Context, *connect.Request[grpc.GetTagByIdRequest]) (*connect.Response[grpc.GetTagByIdResponse], error)
	GetAllTags(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllTagsResponse], error)
	GetNextTags(context.Context, *connect.Request[grpc.GetNextTagsRequest]) (*connect.Response[grpc.GetNextTagResponse], error)
	GetPrevTags(context.Context, *connect.Request[grpc.GetPrevTagsRequest]) (*connect.Response[grpc.GetPrevTagResponse], error)
}

// NewTagServiceClient constructs a client for the tag.TagService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := grpc.File_tag_tag_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		getTagById: connect.NewClient[grpc.GetTagByIdRequest, grpc.GetTagByIdResponse](
			httpClient,
			baseURL+TagServiceGetTagByIdProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetTagById")),
			connect.WithClientOptions(opts...),
		),
		getAllTags: connect.NewClient[emptypb.Empty, grpc.GetAllTagsResponse](
			httpClient,
			baseURL+TagServiceGetAllTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetAllTags")),
			connect.WithClientOptions(opts...),
		),
		getNextTags: connect.NewClient[grpc.GetNextTagsRequest, grpc.GetNextTagResponse](
			httpClient,
			baseURL+TagServiceGetNextTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetNextTags")),
			connect.WithClientOptions(opts...),
		),
		getPrevTags: connect.NewClient[grpc.GetPrevTagsRequest, grpc.GetPrevTagResponse](
			httpClient,
			baseURL+TagServiceGetPrevTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetPrevTags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	getTagById  *connect.Client[grpc.GetTagByIdRequest, grpc.GetTagByIdResponse]
	getAllTags  *connect.Client[emptypb.Empty, grpc.GetAllTagsResponse]
	getNextTags *connect.Client[grpc.GetNextTagsRequest, grpc.GetNextTagResponse]
	getPrevTags *connect.Client[grpc.GetPrevTagsRequest, grpc.GetPrevTagResponse]
}

// GetTagById calls tag.TagService.GetTagById.
func (c *tagServiceClient) GetTagById(ctx context.Context, req *connect.Request[grpc.GetTagByIdRequest]) (*connect.Response[grpc.GetTagByIdResponse], error) {
	return c.getTagById.CallUnary(ctx, req)
}

// GetAllTags calls tag.TagService.GetAllTags.
func (c *tagServiceClient) GetAllTags(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllTagsResponse], error) {
	return c.getAllTags.CallUnary(ctx, req)
}

// GetNextTags calls tag.TagService.GetNextTags.
func (c *tagServiceClient) GetNextTags(ctx context.Context, req *connect.Request[grpc.GetNextTagsRequest]) (*connect.Response[grpc.GetNextTagResponse], error) {
	return c.getNextTags.CallUnary(ctx, req)
}

// GetPrevTags calls tag.TagService.GetPrevTags.
func (c *tagServiceClient) GetPrevTags(ctx context.Context, req *connect.Request[grpc.GetPrevTagsRequest]) (*connect.Response[grpc.GetPrevTagResponse], error) {
	return c.getPrevTags.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the tag.TagService service.
type TagServiceHandler interface {
	GetTagById(context.Context, *connect.Request[grpc.GetTagByIdRequest]) (*connect.Response[grpc.GetTagByIdResponse], error)
	GetAllTags(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllTagsResponse], error)
	GetNextTags(context.Context, *connect.Request[grpc.GetNextTagsRequest]) (*connect.Response[grpc.GetNextTagResponse], error)
	GetPrevTags(context.Context, *connect.Request[grpc.GetPrevTagsRequest]) (*connect.Response[grpc.GetPrevTagResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := grpc.File_tag_tag_proto.Services().ByName("TagService").Methods()
	tagServiceGetTagByIdHandler := connect.NewUnaryHandler(
		TagServiceGetTagByIdProcedure,
		svc.GetTagById,
		connect.WithSchema(tagServiceMethods.ByName("GetTagById")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetAllTagsHandler := connect.NewUnaryHandler(
		TagServiceGetAllTagsProcedure,
		svc.GetAllTags,
		connect.WithSchema(tagServiceMethods.ByName("GetAllTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetNextTagsHandler := connect.NewUnaryHandler(
		TagServiceGetNextTagsProcedure,
		svc.GetNextTags,
		connect.WithSchema(tagServiceMethods.ByName("GetNextTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetPrevTagsHandler := connect.NewUnaryHandler(
		TagServiceGetPrevTagsProcedure,
		svc.GetPrevTags,
		connect.WithSchema(tagServiceMethods.ByName("GetPrevTags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tag.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceGetTagByIdProcedure:
			tagServiceGetTagByIdHandler.ServeHTTP(w, r)
		case TagServiceGetAllTagsProcedure:
			tagServiceGetAllTagsHandler.ServeHTTP(w, r)
		case TagServiceGetNextTagsProcedure:
			tagServiceGetNextTagsHandler.ServeHTTP(w, r)
		case TagServiceGetPrevTagsProcedure:
			tagServiceGetPrevTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) GetTagById(context.Context, *connect.Request[grpc.GetTagByIdRequest]) (*connect.Response[grpc.GetTagByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.TagService.GetTagById is not implemented"))
}

func (UnimplementedTagServiceHandler) GetAllTags(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[grpc.GetAllTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.TagService.GetAllTags is not implemented"))
}

func (UnimplementedTagServiceHandler) GetNextTags(context.Context, *connect.Request[grpc.GetNextTagsRequest]) (*connect.Response[grpc.GetNextTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.TagService.GetNextTags is not implemented"))
}

func (UnimplementedTagServiceHandler) GetPrevTags(context.Context, *connect.Request[grpc.GetPrevTagsRequest]) (*connect.Response[grpc.GetPrevTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tag.TagService.GetPrevTags is not implemented"))
}
