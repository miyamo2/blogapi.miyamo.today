// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: article.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleService_GetArticleById_FullMethodName      = "/article.ArticleService/GetArticleById"
	ArticleService_GetAllArticles_FullMethodName      = "/article.ArticleService/GetAllArticles"
	ArticleService_GetNextPageArticles_FullMethodName = "/article.ArticleService/GetNextPageArticles"
	ArticleService_GetPrevPageArticles_FullMethodName = "/article.ArticleService/GetPrevPageArticles"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	GetAllArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleArticleResponse, error)
	GetNextPageArticles(ctx context.Context, in *GetNextPageArticlesRequest, opts ...grpc.CallOption) (*MultipleArticleResponse, error)
	GetPrevPageArticles(ctx context.Context, in *GetPrevPageArticlesRequest, opts ...grpc.CallOption) (*MultipleArticleResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetArticleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetAllArticles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleArticleResponse, error) {
	out := new(MultipleArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetAllArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetNextPageArticles(ctx context.Context, in *GetNextPageArticlesRequest, opts ...grpc.CallOption) (*MultipleArticleResponse, error) {
	out := new(MultipleArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetNextPageArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) GetPrevPageArticles(ctx context.Context, in *GetPrevPageArticlesRequest, opts ...grpc.CallOption) (*MultipleArticleResponse, error) {
	out := new(MultipleArticleResponse)
	err := c.cc.Invoke(ctx, ArticleService_GetPrevPageArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	GetArticleById(context.Context, *GetArticleByIdRequest) (*SingleArticleResponse, error)
	GetAllArticles(context.Context, *emptypb.Empty) (*MultipleArticleResponse, error)
	GetNextPageArticles(context.Context, *GetNextPageArticlesRequest) (*MultipleArticleResponse, error)
	GetPrevPageArticles(context.Context, *GetPrevPageArticlesRequest) (*MultipleArticleResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) GetArticleById(context.Context, *GetArticleByIdRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleById not implemented")
}
func (UnimplementedArticleServiceServer) GetAllArticles(context.Context, *emptypb.Empty) (*MultipleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArticles not implemented")
}
func (UnimplementedArticleServiceServer) GetNextPageArticles(context.Context, *GetNextPageArticlesRequest) (*MultipleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextPageArticles not implemented")
}
func (UnimplementedArticleServiceServer) GetPrevPageArticles(context.Context, *GetPrevPageArticlesRequest) (*MultipleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrevPageArticles not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_GetArticleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetArticleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetArticleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetArticleById(ctx, req.(*GetArticleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetAllArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetAllArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetAllArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetAllArticles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetNextPageArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextPageArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetNextPageArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetNextPageArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetNextPageArticles(ctx, req.(*GetNextPageArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_GetPrevPageArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrevPageArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetPrevPageArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleService_GetPrevPageArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetPrevPageArticles(ctx, req.(*GetPrevPageArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticleById",
			Handler:    _ArticleService_GetArticleById_Handler,
		},
		{
			MethodName: "GetAllArticles",
			Handler:    _ArticleService_GetAllArticles_Handler,
		},
		{
			MethodName: "GetNextPageArticles",
			Handler:    _ArticleService_GetNextPageArticles_Handler,
		},
		{
			MethodName: "GetPrevPageArticles",
			Handler:    _ArticleService_GetPrevPageArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
