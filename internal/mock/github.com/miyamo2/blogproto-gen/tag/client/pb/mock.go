// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/miyamo2/blogproto-gen/tag/client/pb (interfaces: TagServiceClient)
//
// Generated by this command:
//
//	mockgen.exe github.com/miyamo2/blogproto-gen/tag/client/pb TagServiceClient
//
// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	internal "github.com/miyamo2/blogproto-gen/tag/client/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTagServiceClient is a mock of TagServiceClient interface.
type MockTagServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceClientMockRecorder
}

// MockTagServiceClientMockRecorder is the mock recorder for MockTagServiceClient.
type MockTagServiceClientMockRecorder struct {
	mock *MockTagServiceClient
}

// NewMockTagServiceClient creates a new mock instance.
func NewMockTagServiceClient(ctrl *gomock.Controller) *MockTagServiceClient {
	mock := &MockTagServiceClient{ctrl: ctrl}
	mock.recorder = &MockTagServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagServiceClient) EXPECT() *MockTagServiceClientMockRecorder {
	return m.recorder
}

// GetAllTags mocks base method.
func (m *MockTagServiceClient) GetAllTags(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*internal.GetAllTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTags", varargs...)
	ret0, _ := ret[0].(*internal.GetAllTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagServiceClientMockRecorder) GetAllTags(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetAllTags), varargs...)
}

// GetNextTags mocks base method.
func (m *MockTagServiceClient) GetNextTags(arg0 context.Context, arg1 *internal.GetNextTagsRequest, arg2 ...grpc.CallOption) (*internal.GetNextTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNextTags", varargs...)
	ret0, _ := ret[0].(*internal.GetNextTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextTags indicates an expected call of GetNextTags.
func (mr *MockTagServiceClientMockRecorder) GetNextTags(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetNextTags), varargs...)
}

// GetPrevTags mocks base method.
func (m *MockTagServiceClient) GetPrevTags(arg0 context.Context, arg1 *internal.GetPrevTagsRequest, arg2 ...grpc.CallOption) (*internal.GetPrevTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrevTags", varargs...)
	ret0, _ := ret[0].(*internal.GetPrevTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevTags indicates an expected call of GetPrevTags.
func (mr *MockTagServiceClientMockRecorder) GetPrevTags(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevTags", reflect.TypeOf((*MockTagServiceClient)(nil).GetPrevTags), varargs...)
}

// GetTagById mocks base method.
func (m *MockTagServiceClient) GetTagById(arg0 context.Context, arg1 *internal.GetTagByIdRequest, arg2 ...grpc.CallOption) (*internal.GetTagByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagById", varargs...)
	ret0, _ := ret[0].(*internal.GetTagByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockTagServiceClientMockRecorder) GetTagById(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockTagServiceClient)(nil).GetTagById), varargs...)
}
