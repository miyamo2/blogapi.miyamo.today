// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: blogging_event.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BloggingEventService_CreateArticle_FullMethodName = "/blogging_event.BloggingEventService/CreateArticle"
	BloggingEventService_UpdateArticle_FullMethodName = "/blogging_event.BloggingEventService/UpdateArticle"
	BloggingEventService_AttachTag_FullMethodName     = "/blogging_event.BloggingEventService/AttachTag"
	BloggingEventService_DetachTag_FullMethodName     = "/blogging_event.BloggingEventService/DetachTag"
)

// BloggingEventServiceClient is the client API for BloggingEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloggingEventServiceClient interface {
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	AttachTag(ctx context.Context, in *AttachTagRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
	DetachTag(ctx context.Context, in *DetachTagRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error)
}

type bloggingEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBloggingEventServiceClient(cc grpc.ClientConnInterface) BloggingEventServiceClient {
	return &bloggingEventServiceClient{cc}
}

func (c *bloggingEventServiceClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) AttachTag(ctx context.Context, in *AttachTagRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_AttachTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloggingEventServiceClient) DetachTag(ctx context.Context, in *DetachTagRequest, opts ...grpc.CallOption) (*BloggingEventResponse, error) {
	out := new(BloggingEventResponse)
	err := c.cc.Invoke(ctx, BloggingEventService_DetachTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloggingEventServiceServer is the server API for BloggingEventService service.
// All implementations must embed UnimplementedBloggingEventServiceServer
// for forward compatibility
type BloggingEventServiceServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*BloggingEventResponse, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*BloggingEventResponse, error)
	AttachTag(context.Context, *AttachTagRequest) (*BloggingEventResponse, error)
	DetachTag(context.Context, *DetachTagRequest) (*BloggingEventResponse, error)
	mustEmbedUnimplementedBloggingEventServiceServer()
}

// UnimplementedBloggingEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBloggingEventServiceServer struct {
}

func (UnimplementedBloggingEventServiceServer) CreateArticle(context.Context, *CreateArticleRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedBloggingEventServiceServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedBloggingEventServiceServer) AttachTag(context.Context, *AttachTagRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachTag not implemented")
}
func (UnimplementedBloggingEventServiceServer) DetachTag(context.Context, *DetachTagRequest) (*BloggingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachTag not implemented")
}
func (UnimplementedBloggingEventServiceServer) mustEmbedUnimplementedBloggingEventServiceServer() {}

// UnsafeBloggingEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloggingEventServiceServer will
// result in compilation errors.
type UnsafeBloggingEventServiceServer interface {
	mustEmbedUnimplementedBloggingEventServiceServer()
}

func RegisterBloggingEventServiceServer(s grpc.ServiceRegistrar, srv BloggingEventServiceServer) {
	s.RegisterService(&BloggingEventService_ServiceDesc, srv)
}

func _BloggingEventService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_AttachTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).AttachTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_AttachTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).AttachTag(ctx, req.(*AttachTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloggingEventService_DetachTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloggingEventServiceServer).DetachTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloggingEventService_DetachTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloggingEventServiceServer).DetachTag(ctx, req.(*DetachTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BloggingEventService_ServiceDesc is the grpc.ServiceDesc for BloggingEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloggingEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogging_event.BloggingEventService",
	HandlerType: (*BloggingEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _BloggingEventService_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _BloggingEventService_UpdateArticle_Handler,
		},
		{
			MethodName: "AttachTag",
			Handler:    _BloggingEventService_AttachTag_Handler,
		},
		{
			MethodName: "DetachTag",
			Handler:    _BloggingEventService_DetachTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogging_event.proto",
}
