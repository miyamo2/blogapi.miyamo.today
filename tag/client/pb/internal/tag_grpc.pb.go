// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: tag.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TagService_GetTagById_FullMethodName      = "/tag.TagService/GetTagById"
	TagService_GetAllTags_FullMethodName      = "/tag.TagService/GetAllTags"
	TagService_GetNextPageTags_FullMethodName = "/tag.TagService/GetNextPageTags"
	TagService_GetPrevPageTags_FullMethodName = "/tag.TagService/GetPrevPageTags"
)

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	GetTagById(ctx context.Context, in *GetTagByIdRequest, opts ...grpc.CallOption) (*SingleTagResponse, error)
	GetAllTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleTagResponse, error)
	GetNextPageTags(ctx context.Context, in *GetNextPageTagsRequest, opts ...grpc.CallOption) (*MultipleTagResponse, error)
	GetPrevPageTags(ctx context.Context, in *GetPrevPageTagsRequest, opts ...grpc.CallOption) (*MultipleTagResponse, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) GetTagById(ctx context.Context, in *GetTagByIdRequest, opts ...grpc.CallOption) (*SingleTagResponse, error) {
	out := new(SingleTagResponse)
	err := c.cc.Invoke(ctx, TagService_GetTagById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetAllTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleTagResponse, error) {
	out := new(MultipleTagResponse)
	err := c.cc.Invoke(ctx, TagService_GetAllTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetNextPageTags(ctx context.Context, in *GetNextPageTagsRequest, opts ...grpc.CallOption) (*MultipleTagResponse, error) {
	out := new(MultipleTagResponse)
	err := c.cc.Invoke(ctx, TagService_GetNextPageTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetPrevPageTags(ctx context.Context, in *GetPrevPageTagsRequest, opts ...grpc.CallOption) (*MultipleTagResponse, error) {
	out := new(MultipleTagResponse)
	err := c.cc.Invoke(ctx, TagService_GetPrevPageTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations must embed UnimplementedTagServiceServer
// for forward compatibility
type TagServiceServer interface {
	GetTagById(context.Context, *GetTagByIdRequest) (*SingleTagResponse, error)
	GetAllTags(context.Context, *emptypb.Empty) (*MultipleTagResponse, error)
	GetNextPageTags(context.Context, *GetNextPageTagsRequest) (*MultipleTagResponse, error)
	GetPrevPageTags(context.Context, *GetPrevPageTagsRequest) (*MultipleTagResponse, error)
	mustEmbedUnimplementedTagServiceServer()
}

// UnimplementedTagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (UnimplementedTagServiceServer) GetTagById(context.Context, *GetTagByIdRequest) (*SingleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagById not implemented")
}
func (UnimplementedTagServiceServer) GetAllTags(context.Context, *emptypb.Empty) (*MultipleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTags not implemented")
}
func (UnimplementedTagServiceServer) GetNextPageTags(context.Context, *GetNextPageTagsRequest) (*MultipleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextPageTags not implemented")
}
func (UnimplementedTagServiceServer) GetPrevPageTags(context.Context, *GetPrevPageTagsRequest) (*MultipleTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrevPageTags not implemented")
}
func (UnimplementedTagServiceServer) mustEmbedUnimplementedTagServiceServer() {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_GetTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetTagById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetTagById(ctx, req.(*GetTagByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetAllTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetAllTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetAllTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetAllTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetNextPageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextPageTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetNextPageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetNextPageTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetNextPageTags(ctx, req.(*GetNextPageTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetPrevPageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrevPageTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetPrevPageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetPrevPageTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetPrevPageTags(ctx, req.(*GetPrevPageTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTagById",
			Handler:    _TagService_GetTagById_Handler,
		},
		{
			MethodName: "GetAllTags",
			Handler:    _TagService_GetAllTags_Handler,
		},
		{
			MethodName: "GetNextPageTags",
			Handler:    _TagService_GetNextPageTags_Handler,
		},
		{
			MethodName: "GetPrevPageTags",
			Handler:    _TagService_GetPrevPageTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
