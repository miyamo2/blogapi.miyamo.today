// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.article.sql

package article

import (
	"context"

	"blogapi.miyamo.today/read-model-updater/internal/infra/rdb/types"
)

const attachTags = `-- name: AttachTags :exec
WITH "inserted" AS (
    INSERT INTO "tags" (
        "id"
        ,"article_id"
        ,"name"
        ,"created_at"
        ,"updated_at"
    )
    SELECT id, article_id, name, created_at, updated_at FROM "tmp_tags" WHERE "tmp_tags"."article_id" = $1
    ON CONFLICT ("id","article_id") DO UPDATE
    SET "updated_at" = EXCLUDED.updated_at
    RETURNING "id"
)
DELETE
FROM
    "tags"
WHERE
    "tags"."article_id" = $1
AND
    "tags"."id" NOT IN (SELECT id FROM "inserted")
`

func (q *Queries) AttachTags(ctx context.Context, articleID string) error {
	_, err := q.db.Exec(ctx, attachTags, articleID)
	return err
}

const createTempTagsTable = `-- name: CreateTempTagsTable :exec
CREATE TEMP TABLE IF NOT EXISTS tmp_tags (
    id VARCHAR(144),
    article_id VARCHAR(26),
    name VARCHAR(35) NOT NULL,
    created_at timestamp WITH TIME ZONE NOT NULL,
    updated_at timestamp WITH TIME ZONE NOT NULL,
    PRIMARY KEY (id, article_id)
) ON COMMIT PRESERVE ROWS
`

func (q *Queries) CreateTempTagsTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTempTagsTable)
	return err
}

type PreAttachTagsParams struct {
	ID        string        `db:"id"`
	ArticleID string        `db:"article_id"`
	Name      string        `db:"name"`
	CreatedAt types.UTCTime `db:"created_at"`
	UpdatedAt types.UTCTime `db:"updated_at"`
}

const putArticle = `-- name: PutArticle :exec
INSERT INTO "articles" (
    "id"
    ,"title"
    ,"body"
    ,"thumbnail"
    ,"created_at"
    ,"updated_at"
)
VALUES (
    $1
    ,$2
    ,$3
    ,$4
    ,$5
    ,$6
)
ON CONFLICT ("id") DO UPDATE
SET "title" = EXCLUDED.title
    ,"body" = EXCLUDED.body
    ,"thumbnail" = EXCLUDED.thumbnail
    ,"updated_at" = EXCLUDED.updated_at
`

type PutArticleParams struct {
	ID        string        `db:"id"`
	Title     string        `db:"title"`
	Body      string        `db:"body"`
	Thumbnail string        `db:"thumbnail"`
	CreatedAt types.UTCTime `db:"created_at"`
	UpdatedAt types.UTCTime `db:"updated_at"`
}

func (q *Queries) PutArticle(ctx context.Context, arg PutArticleParams) error {
	_, err := q.db.Exec(ctx, putArticle,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Thumbnail,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
