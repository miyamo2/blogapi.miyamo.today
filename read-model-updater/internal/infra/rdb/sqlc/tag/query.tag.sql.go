// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.tag.sql

package tag

import (
	"context"

	"blogapi.miyamo.today/read-model-updater/internal/infra/rdb/types"
)

const createTempArticlesTable = `-- name: CreateTempArticlesTable :exec
CREATE TEMP TABLE tmp_articles (
    id VARCHAR(26),
    tag_id VARCHAR(144),
    title VARCHAR(255) NOT NULL,
    thumbnail VARCHAR(524271),
    created_at timestamp WITH TIME ZONE NOT NULL,
    updated_at timestamp WITH TIME ZONE NOT NULL,
    FOREIGN KEY (tag_id) REFERENCES tags(id),
    PRIMARY KEY (id, tag_id)
) ON COMMIT PRESERVE ROWS
`

func (q *Queries) CreateTempArticlesTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTempArticlesTable)
	return err
}

const createTempTagsTable = `-- name: CreateTempTagsTable :exec
CREATE TEMP TABLE tmp_tags (
    id VARCHAR(144),
    name VARCHAR(35) NOT NULL,
    created_at timestamp WITH TIME ZONE NOT NULL,
    updated_at timestamp WITH TIME ZONE NOT NULL,
    PRIMARY KEY (id)
) ON COMMIT PRESERVE ROWS
`

func (q *Queries) CreateTempTagsTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTempTagsTable)
	return err
}

type PrePutArticleParams struct {
	ID        string        `db:"id"`
	TagID     string        `db:"tag_id"`
	Title     string        `db:"title"`
	Thumbnail string        `db:"thumbnail"`
	CreatedAt types.UTCTime `db:"created_at"`
	UpdatedAt types.UTCTime `db:"updated_at"`
}

type PrePutTagsParams struct {
	ID        string        `db:"id"`
	Name      string        `db:"name"`
	CreatedAt types.UTCTime `db:"created_at"`
	UpdatedAt types.UTCTime `db:"updated_at"`
}

const putArticle = `-- name: PutArticle :exec
WITH "inserted" AS (
    INSERT INTO "articles" (
        "id"
        ,"tag_id"
        ,"title"
        ,"thumbnail"
        ,"created_at"
        ,"updated_at"
    )
    SELECT id, tag_id, title, thumbnail, created_at, updated_at FROM "tmp_articles"
    ON CONFLICT ("id","tag_id") DO UPDATE
        SET "title" = EXCLUDED.title
        ,"body" = EXCLUDED.body
        ,"thumbnail" = EXCLUDED.thumbnail
        ,"updated_at" = EXCLUDED.updated_at
    RETURNING "id", "tag_id"
)
DELETE
FROM
    "articles"
WHERE
    "article"."id" NOT IN (SELECT "id" FROM "inserted")
AND
    "article"."tag_id" NOT IN (SELECT "tag_id" FROM "inserted")
`

func (q *Queries) PutArticle(ctx context.Context) error {
	_, err := q.db.Exec(ctx, putArticle)
	return err
}

const putTags = `-- name: PutTags :exec
INSERT INTO "tags" (
    "id"
    ,"name"
    ,"created_at"
    ,"updated_at"
)
SELECT id, name, created_at, updated_at FROM "tmp_tags"
ON CONFLICT DO NOTHING
`

func (q *Queries) PutTags(ctx context.Context) error {
	_, err := q.db.Exec(ctx, putTags)
	return err
}
