// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"blogapi.miyamo.today/read-model-updater/internal/app/usecase"
	"blogapi.miyamo.today/read-model-updater/internal/app/usecase/command"
	"blogapi.miyamo.today/read-model-updater/internal/app/usecase/externalapi"
	"blogapi.miyamo.today/read-model-updater/internal/app/usecase/query"
	"blogapi.miyamo.today/read-model-updater/internal/if-adapters/converter"
	"blogapi.miyamo.today/read-model-updater/internal/if-adapters/handler"
	"blogapi.miyamo.today/read-model-updater/internal/infra/dynamo"
	"blogapi.miyamo.today/read-model-updater/internal/infra/githubactions"
	"blogapi.miyamo.today/read-model-updater/internal/infra/rdb"
	"blogapi.miyamo.today/read-model-updater/internal/infra/streams"
	"github.com/aws/aws-sdk-go-v2/service/dynamodbstreams"
	"github.com/google/wire"
)

import (
	_ "github.com/newrelic/go-agent/v3/integrations/nrpgx5"
)

// Injectors from wire.go:

func GetDependecies() *Dependencies {
	config := provideAWSConfig()
	application := provideNewRelicApp()
	converterConverter := converter.NewConverter()
	db := provideRDBGORM()
	dynamoDB := provideDynamoDBGORM(config)
	bloggingEventQueryService := dynamo.NewBloggingEventQueryService()
	articleCommandService := rdb.NewArticleCommandService()
	tagCommandService := rdb.NewTagCommandService()
	blogPublisher := provideBlogPublisher()
	sync := provideSynUsecaseSet(db, dynamoDB, bloggingEventQueryService, articleCommandService, tagCommandService, blogPublisher)
	syncHandler := handler.NewSyncHandler(converterConverter, sync)
	client := provideDynamoDBStreamClient(config)
	streamARN := provideStreamARN()
	dependencies := newDependencies(config, application, syncHandler, client, streamARN)
	return dependencies
}

// wire.go:

var awsConfigSet = wire.NewSet(provideAWSConfig)

var newRelicSet = wire.NewSet(provideNewRelicApp)

var rdbSet = wire.NewSet(provideRDBGORM)

var dynamodbSet = wire.NewSet(provideDynamoDBGORM)

var queryServiceSet = wire.NewSet(dynamo.NewBloggingEventQueryService, wire.Bind(new(query.BloggingEventService), new(*dynamo.BloggingEventQueryService)))

var commandServiceSet = wire.NewSet(rdb.NewArticleCommandService, wire.Bind(new(command.Article), new(*rdb.ArticleCommandService)), rdb.NewTagCommandService, wire.Bind(new(command.Tag), new(*rdb.TagCommandService)))

var externalAPISet = wire.NewSet(
	provideBlogPublisher, wire.Bind(new(externalapi.BlogPublisher), new(*githubactions.BlogPublisher)),
)

var usecaseSet = wire.NewSet(
	provideSynUsecaseSet, wire.Bind(new(handler.SyncUsecase), new(*usecase.Sync)),
)

var converterSet = wire.NewSet(converter.NewConverter, wire.Bind(new(handler.ToSyncUsecaseInDtoConverter), new(*converter.Converter)))

var handlerSet = wire.NewSet(handler.NewSyncHandler)

var streamSet = wire.NewSet(
	provideDynamoDBStreamClient, wire.Bind(new(streams.Client), new(*dynamodbstreams.Client)),
)

var streamARNSet = wire.NewSet(provideStreamARN)

var dependenciesSet = wire.NewSet(newDependencies)
